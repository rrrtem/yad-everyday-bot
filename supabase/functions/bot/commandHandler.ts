import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { sendDirectMessage, findUserByTelegramId, registerUser } from "./userHandler.ts";
import { MSG_START, MSG_GET_CHAT_ID, MSG_COMEBACK_RECEIVED, OWNER_TELEGRAM_ID } from "../constants.ts";
import { dailyCron, publicDeadlineReminder, allInfo } from "./cronHandler.ts";
import { handleStartCommand, handlePromoCode } from "./startCommandHandler.ts";
import { syncSubscriptionsCommand } from "./tributeApiHandler.ts";

const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

if (!SUPABASE_URL || !SUPABASE_KEY) {
  throw new Error("Missing Supabase environment variables for commandHandler.");
}

const supabase: SupabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (fallback, –µ—Å–ª–∏ –ø–æ–ª–µ user_state –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î)
const userStates = new Map<number, string>();

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
 */
export async function handleStartCommandWrapper(message: any): Promise<void> {
  await handleStartCommand(message);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ–º–æ–∫–æ–¥—ã)
 */
export async function handleTextMessage(message: any): Promise<void> {
  const telegramId = message.from.id;
  const text = message.text?.trim();
  
  console.log(`handleTextMessage: telegramId=${telegramId}, text="${text}"`);
  
  if (!text) {
    console.log("handleTextMessage: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –≤—ã—Ö–æ–¥");
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—Å fallback –Ω–∞ Map)
  const user = await findUserByTelegramId(telegramId);
  let state = user?.user_state;
  
  // Fallback –Ω–∞ Map, –µ—Å–ª–∏ –ø–æ–ª–µ user_state –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
  if (state === undefined && user) {
    state = userStates.get(telegramId);
    console.log(`handleTextMessage: –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback Map, —Å–æ—Å—Ç–æ—è–Ω–∏–µ = "${state}"`);
  }
  
  console.log(`handleTextMessage: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:`, user ? "–¥–∞" : "–Ω–µ—Ç");
  console.log(`handleTextMessage: –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ = "${state}"`);
  
  if (state === "waiting_promo") {
    console.log(`handleTextMessage: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ "${text}"`);
    await handlePromoCode(telegramId, text);
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ handlePromoCode
    console.log(`handleTextMessage: –ø—Ä–æ–º–æ–∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
  } else {
    console.log(`handleTextMessage: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ "waiting_promo", –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ`);
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –ë–î (—Å fallback –Ω–∞ Map)
 */
export async function setWaitingPromoState(telegramId: number): Promise<void> {
  console.log(`setWaitingPromoState: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "waiting_promo" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
  
  // –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ë–î
  const { error } = await supabase
    .from("users")
    .update({ 
      user_state: "waiting_promo",
      updated_at: new Date().toISOString()
    })
    .eq("telegram_id", telegramId);
    
  if (error) {
    console.error(`setWaitingPromoState: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º Map fallback):`, error);
    // Fallback –Ω–∞ Map
    userStates.set(telegramId, "waiting_promo");
    console.log(`setWaitingPromoState: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ Map –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
  } else {
    console.log(`setWaitingPromoState: —Å–æ—Å—Ç–æ—è–Ω–∏–µ "waiting_promo" —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—Å fallback –Ω–∞ Map)
 */
export async function clearUserState(telegramId: number): Promise<void> {
  console.log(`clearUserState: –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
  
  // –ü—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –≤ –ë–î
  const { error } = await supabase
    .from("users")
    .update({ 
      user_state: null,
      updated_at: new Date().toISOString()
    })
    .eq("telegram_id", telegramId);
    
  if (error) {
    console.error(`clearUserState: –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º Map fallback):`, error);
  } else {
    console.log(`clearUserState: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
  }
  
  // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º Map (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
  userStates.delete(telegramId);
  console.log(`clearUserState: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –≤ Map –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get - –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞
 */
export async function handleGetCommand(message: any): Promise<void> {
  const chatId = message.chat.id;
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text: MSG_GET_CHAT_ID(chatId),
      parse_mode: "HTML"
    })
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /comeback
 */
export async function handleComebackCommand(message: any): Promise<void> {
  await sendDirectMessage(message.from.id, MSG_COMEBACK_RECEIVED);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
 */
export async function handleOwnerCommands(message: any): Promise<void> {
  const text = message.text || "";
  console.log(`üîß handleOwnerCommands called with text: "${text}"`);
  
  if (text === "/daily") {
    const res = await dailyCron();
    let report = "–ö–æ–º–∞–Ω–¥–∞ /daily –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:\n";
    try {
      const data = await res.json();
      if (data.stats) {
        report += `‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.`;
      } else {
        report += `–°—Ç–∞—Ç—É—Å: ${data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
      }
    } catch {
      report += `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–æ–¥: ${res.status}`;
    }
    await sendDirectMessage(message.from.id, report);
  } else if (text === "/remind") {
    const res = await publicDeadlineReminder();
    let report = "–ö–æ–º–∞–Ω–¥–∞ /remind –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:\n";
    try {
      const data = await res.json();
      if (data.usernames?.length) {
        report += `‚úÖ –ù–∞–ø–æ–º–Ω–∏–ª–∏ ${data.usernames.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n` + data.usernames.map(u => `@${u}`).join(", ");
        if (data.sentToThreads) {
          report += `\nüì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${data.sentToThreads} —Ç—Ä–µ–¥(–∞)`;
        }
      } else {
        report += `‚ÑπÔ∏è ${data.message}`;
      }
      if (data.timeLeftMsg) {
        report += `\n‚è∞ ${data.timeLeftMsg}`;
      }
    } catch {
      report += `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–æ–¥: ${res.status}`;
    }
    await sendDirectMessage(message.from.id, report);
  } else if (text === "/allinfo") {
    const res = await allInfo();
    let report = "–ö–æ–º–∞–Ω–¥–∞ /allinfo –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:\n";
    try {
      const data = await res.json();
      if (data.stats) {
        report += `‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`;
      } else {
        report += `–°—Ç–∞—Ç—É—Å: ${data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
      }
    } catch {
      report += `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–æ–¥: ${res.status}`;
    }
    await sendDirectMessage(message.from.id, report);
  } else if (text === "/tribute_test") {
    await handleTributeTestCommand(message.from.id);
  } else if (text === "/sync_subscriptions") {
    await handleSyncSubscriptionsCommand(message.from.id);
  } else if (text.startsWith("/test_webhook ")) {
    await handleTestWebhookCommand(message.from.id, text);
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tribute webhook'–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
 */
async function handleTributeTestCommand(telegramId: number): Promise<void> {
  const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
  const webhookUrl = `${SUPABASE_URL}/functions/v1/bot`;
  
  let report = "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tribute webhook:\n\n";
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
  try {
    const response = await fetch(webhookUrl, { method: 'GET' });
    report += `üì° URL –¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}\n`;
  } catch (error) {
    report += `‚ùå URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}\n`;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const tributeApiKey = Deno.env.get("TRIBUTE_API_KEY");
  report += `üîë TRIBUTE_API_KEY: ${tributeApiKey ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;
  
  report += `\nüîó Webhook URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Tribute:\n\`${webhookUrl}\`\n`;
  report += `\nüìã Tribute webhook'–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É \`trbt-signature\``;
  report += `\nüìã –û–¥–∏–Ω URL –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ Telegram, –∏ Tribute webhook'–∏`;
  
  await sendDirectMessage(telegramId, report);
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
 */
async function handleSyncSubscriptionsCommand(telegramId: number): Promise<void> {
  await sendDirectMessage(telegramId, "üîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–æ–∫...");
  
  try {
    const result = await syncSubscriptionsCommand();
    await sendDirectMessage(telegramId, result);
  } catch (error) {
    console.error("Error in sync subscriptions command:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`);
  }
}

/**
 * –°–∏–º—É–ª—è—Ü–∏—è Tribute webhook'–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test_webhook new_subscription 327223364
 */
async function handleTestWebhookCommand(telegramId: number, text: string): Promise<void> {
  console.log(`üß™ handleTestWebhookCommand called for user ${telegramId} with text: "${text}"`);
  const parts = text.split(" ");
  
  if (parts.length < 3) {
    await sendDirectMessage(telegramId, `üß™ –°–∏–º—É–ª—è—Ü–∏—è Tribute webhook\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/test_webhook new_subscription TELEGRAM_ID\n/test_webhook cancelled_subscription TELEGRAM_ID\n\n–ü—Ä–∏–º–µ—Ä:\n/test_webhook new_subscription 327223364`);
    return;
  }
  
  const [, eventType, targetTelegramId] = parts;
  const targetId = parseInt(targetTelegramId);
  
  if (!targetId || isNaN(targetId)) {
    await sendDirectMessage(telegramId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π telegram_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.");
    return;
  }
  
  if (!["new_subscription", "cancelled_subscription"].includes(eventType)) {
    await sendDirectMessage(telegramId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: new_subscription –∏–ª–∏ cancelled_subscription");
    return;
  }
  
  await sendDirectMessage(telegramId, `üß™ –°–∏–º—É–ª–∏—Ä—É—é ${eventType} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetId}...`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Tribute webhook –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const now = new Date().toISOString();
    
    let webhookPayload: any;
    
    if (eventType === "new_subscription") {
      webhookPayload = {
        subscription_name: "Support my art üåü",
        subscription_id: 999999,
        period_id: 888888, 
        period: "monthly",
        price: 500, // 5 –µ–≤—Ä–æ –≤ —Ü–µ–Ω—Ç–∞—Ö
        amount: 500,
        currency: "eur",
        user_id: 777777,
        telegram_user_id: targetId,
        channel_id: 666666,
        channel_name: "YAD Challenge Test",
        expires_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // +30 –¥–Ω–µ–π
      };
    } else {
      webhookPayload = {
        subscription_name: "Support my art üåü",
        subscription_id: 999999,
        period_id: 888888,
        period: "monthly", 
        price: 500,
        amount: 500,
        currency: "eur",
        user_id: 777777,
        telegram_user_id: targetId,
        channel_id: 666666,
        channel_name: "YAD Challenge Test",
        expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // +7 –¥–Ω–µ–π
        cancel_reason: "User cancelled subscription"
      };
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π webhook –≤ —Ñ–æ—Ä–º–∞—Ç–µ Tribute
    const fullWebhook = {
      created_at: now,
      name: eventType,
      payload: webhookPayload,
      sent_at: now
    };
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º HTTP request –∫ –Ω–∞—à–µ–º—É webhook endpoint
    const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
    const webhookUrl = `${SUPABASE_URL}/functions/v1/bot`;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å (–∑–∞–≥–ª—É—à–∫–∞)
    const testSignature = "test_signature_" + Math.random().toString(36).substring(7);
    
    const requestBody = JSON.stringify(fullWebhook);
    
    await sendDirectMessage(telegramId, `üì° –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π webhook...\n\nURL: ${webhookUrl}\n–¢–µ–ª–æ: ${requestBody.substring(0, 200)}...`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –∑–∞–ø—Ä–æ—Å
    const result = await fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "trbt-signature": testSignature,
        "X-Test-Webhook": "true" // –ú–∞—Ä–∫–µ—Ä —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π webhook
      },
      body: requestBody
    });
    
    if (result) {
      const resultData = await result.json();
      const status = result.status;
      
      if (status === 200) {
        await sendDirectMessage(telegramId, `‚úÖ Webhook —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n–û—Ç–≤–µ—Ç: ${JSON.stringify(resultData, null, 2)}`);
      } else {
        await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ (${status}):\n\n${JSON.stringify(resultData, null, 2)}`);
      }
    }
    
  } catch (error) {
    console.error("Error in test webhook command:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏: ${error.message}`);
  }
}