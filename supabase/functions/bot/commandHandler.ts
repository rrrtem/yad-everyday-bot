import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { sendDirectMessage, findUserByTelegramId, registerUser, sendStatusMessageWithButtons } from "./userHandler.ts";
import { MSG_START, MSG_GET_CHAT_ID, MSG_WELCOME_RETURNING, MSG_RESET_SUCCESS, OWNER_TELEGRAM_ID, MSG_CHAT_MEMBER_STATUS, MSG_CONTINUE_SETUP_HINT, MSG_ACTIVE_USER_STATUS_HINT, MSG_BROADCAST_CHAT_USAGE, MSG_BROADCAST_NOCHAT_USAGE, MSG_BROADCAST_STARTING_CHAT, MSG_BROADCAST_STARTING_NOCHAT, MSG_MASS_STATUS_STARTING, MSG_NO_USERS_IN_CHAT, MSG_NO_USERS_OUT_CHAT, MSG_BROADCAST_COMPLETED, MSG_MASS_STATUS_COMPLETED } from "./constants.ts";
import { dailyCron, publicDeadlineReminder, allInfo } from "./cronHandler/index.ts";
import { handleStartCommand } from "./startCommand/index.ts";
import { handlePromoCode } from "./startCommand/states/index.ts";
import { syncSubscriptionsCommand } from "./tributeApiHandler.ts";
import { handleChangeModeCommand as handleChangeModeCommandInternal, handleChangeModeCallback } from "./changeModeHandler.ts";
import { handleChangePaceCommand as handleChangePaceCommandInternal, handleChangePaceCallback } from "./changePaceHandler.ts";
import { handlePauseCommand, handleUnpauseCommand, handlePauseDaysInput } from "./pauseHandler.ts";
import { handleReminderCommand as handleReminderCommandInternal } from "./reminderHandler.ts";
import { BotMenuManager } from "./utils/botMenuManager.ts";

const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

if (!SUPABASE_URL || !SUPABASE_KEY) {
  throw new Error("Missing Supabase environment variables for commandHandler.");
}

const supabase: SupabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (fallback, –µ—Å–ª–∏ –ø–æ–ª–µ user_state –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î)
const userStates = new Map<number, string>();

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
 */
export async function handleStartCommandWrapper(message: any): Promise<void> {
  await handleStartCommand(message);
  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ start –∫–æ–º–∞–Ω–¥—ã
  await BotMenuManager.updateUserMenu(message.from.id);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function handleAutoStartCommandWrapper(message: any): Promise<void> {
  await handleStartCommand(message, true); // autoTriggered = true
  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ start –∫–æ–º–∞–Ω–¥—ã
  await BotMenuManager.updateUserMenu(message.from.id);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ–º–æ–∫–æ–¥—ã)
 */
export async function handleTextMessage(message: any): Promise<void> {
  const telegramId = message.from.id;
  const text = message.text?.trim();
  
  if (!text) {
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—Å fallback –Ω–∞ Map)
  const user = await findUserByTelegramId(telegramId);
  let state = user?.user_state;
  
  // Fallback –Ω–∞ Map, –µ—Å–ª–∏ –ø–æ–ª–µ user_state –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
  if (state === undefined && user) {
    state = userStates.get(telegramId);
  }
  
  if (state === "waiting_promo") {
    await handlePromoCode(telegramId, text);
  } else if (state === "waiting_pause_days") {
    await handlePauseDaysInput(message);
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –ë–î (—Å fallback –Ω–∞ Map)
 */
export async function setWaitingPromoState(telegramId: number): Promise<void> {
  // –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ë–î
  const { error } = await supabase
    .from("users")
    .update({ 
      user_state: "waiting_promo",
      updated_at: new Date().toISOString()
    })
    .eq("telegram_id", telegramId);
    
  if (error) {
    console.error(`setWaitingPromoState: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º Map fallback):`, error);
    // Fallback –Ω–∞ Map
    userStates.set(telegramId, "waiting_promo");
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—Å fallback –Ω–∞ Map)
 */
export async function clearUserState(telegramId: number): Promise<void> {
  // –ü—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –≤ –ë–î
  const { error } = await supabase
    .from("users")
    .update({ 
      user_state: null,
      updated_at: new Date().toISOString()
    })
    .eq("telegram_id", telegramId);
    
  if (error) {
    console.error(`clearUserState: –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º Map fallback):`, error);
  }
  
  // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º Map (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
  userStates.delete(telegramId);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get - –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞
 */
export async function handleGetCommand(message: any): Promise<void> {
  const chatId = message.chat.id;
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text: MSG_GET_CHAT_ID(chatId),
      parse_mode: "HTML"
    })
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /comeback
 */
export async function handleComebackCommand(message: any): Promise<void> {
  const telegramId = message.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–Ω–∏
  const user = await findUserByTelegramId(telegramId);
  const hasSavedDays = user && user.subscription_days_left > 0;
  const daysLeft = user?.subscription_days_left || 0;
  
  await sendDirectMessage(telegramId, MSG_WELCOME_RETURNING(hasSavedDays, daysLeft));
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reset - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function handleResetCommand(message: any): Promise<void> {
  const telegramId = message.from.id;
  
  try {
    const now = new Date().toISOString();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const { error, data } = await supabase
      .from("users")
      .update({
        user_state: null, // –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mode: null,
        pace: null,
        promo_code: null, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        updated_at: now
      })
      .eq("telegram_id", telegramId);
      
    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error.message, error.details, error.hint);
      await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @rrrtem");
      return;
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Map (fallback –¥–ª—è user_state)
    userStates.delete(telegramId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await sendDirectMessage(telegramId, MSG_RESET_SUCCESS);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ reset
    await BotMenuManager.updateUserMenu(telegramId);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleResetCommand:", error);
    await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @rrrtem");
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function handleStatusCommand(message: any): Promise<void> {
  const telegramId = message.from.id;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const user = await findUserByTelegramId(telegramId);
    
    if (!user) {
      await sendDirectMessage(telegramId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const statusMessage = MSG_CHAT_MEMBER_STATUS(user);
    await sendStatusMessageWithButtons(telegramId, statusMessage, user);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleStatusCommand:", error);
    await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @rrrtem");
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
 */
export async function handleOwnerCommands(message: any): Promise<void> {
  const text = message.text || "";
  const userId = message.from?.id;
  console.log(`üîß Owner command: ${text} from user ${userId} (owner: ${OWNER_TELEGRAM_ID})`);
  
  if (text === "/daily") {
    try {
      await dailyCron();
      // –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ AdminReporter.sendDailyCronReport()
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    } catch (error) {
      await sendDirectMessage(message.from.id, `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /daily: ${error.message}`);
    }
  } else if (text === "/remind") {
    const res = await publicDeadlineReminder();
    let report = "–ö–æ–º–∞–Ω–¥–∞ /remind –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:\n";
    try {
      const data = await res.json();
      if (data.usernames?.length) {
        report += `‚úÖ –ù–∞–ø–æ–º–Ω–∏–ª–∏ ${data.usernames.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n` + data.usernames.map(u => `@${u}`).join(", ");
        if (data.sentToThreads) {
          report += `\nüì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${data.sentToThreads} —Ç—Ä–µ–¥(–∞)`;
        }
      } else {
        report += `‚ÑπÔ∏è ${data.message}`;
      }
      if (data.timeLeftMsg) {
        report += `\n‚è∞ ${data.timeLeftMsg}`;
      }
    } catch {
      report += `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–æ–¥: ${res.status}`;
    }
    await sendDirectMessage(message.from.id, report);
  } else if (text === "/allinfo") {
    try {
      await allInfo();
      // –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ AdminReporter.sendDailyCronReport()
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    } catch (error) {
      await sendDirectMessage(message.from.id, `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /allinfo: ${error.message}`);
    }
  } else if (text === "/tribute_test") {
    await handleTributeTestCommand(message.from.id);
  } else if (text === "/sync_subscriptions") {
    await handleSyncSubscriptionsCommand(message.from.id);
  } else if (text.startsWith("/test_webhook ")) {
    await handleTestWebhookCommand(message.from.id, text);
  } else if (text.startsWith("/open")) {
    await handleOpenSlotsCommand(message.from.id, text);
  } else if (text === "/slots") {
    await handleSlotsStatusCommand(message.from.id);
  } else if (text === "/test_slots") {
    await handleTestSlotsCommand(message.from.id);
  } else if (text === "/close_slots") {
    await handleCloseSlotsCommand(message.from.id);
  } else if (text === "/force_update_commands") {
    await handleForceUpdateCommandsCommand(message.from.id);
  } else if (text.startsWith("/broadcast_chat ")) {
    await handleBroadcastChatCommand(message.from.id, text);
  } else if (text.startsWith("/broadcast_nochat ")) {
    await handleBroadcastNoChatCommand(message.from.id, text);
  } else if (text === "/mass_status") {
    await handleMassStatusCommand(message.from.id);
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tribute webhook'–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
 */
async function handleTributeTestCommand(telegramId: number): Promise<void> {
  const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
  const webhookUrl = `${SUPABASE_URL}/functions/v1/bot`;
  
  let report = "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tribute webhook:\n\n";
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
  try {
    const response = await fetch(webhookUrl, { method: 'GET' });
    report += `üì° URL –¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}\n`;
  } catch (error) {
    report += `‚ùå URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}\n`;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const tributeApiKey = Deno.env.get("TRIBUTE_API_KEY");
  report += `üîë TRIBUTE_API_KEY: ${tributeApiKey ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;
  
  report += `\nüîó Webhook URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Tribute:\n\`${webhookUrl}\`\n`;
  report += `\nüìã Tribute webhook'–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É \`trbt-signature\``;
  report += `\nüìã –û–¥–∏–Ω URL –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ Telegram, –∏ Tribute webhook'–∏`;
  
  await sendDirectMessage(telegramId, report);
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
 */
async function handleSyncSubscriptionsCommand(telegramId: number): Promise<void> {
  await sendDirectMessage(telegramId, "üîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–æ–∫...");
  
  try {
    const result = await syncSubscriptionsCommand();
    await sendDirectMessage(telegramId, result);
  } catch (error) {
    console.error("Error in sync subscriptions command:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`);
  }
}

/**
 * –°–∏–º—É–ª—è—Ü–∏—è Tribute webhook'–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test_webhook new_subscription 327223364
 */
async function handleTestWebhookCommand(telegramId: number, text: string): Promise<void> {
  console.log(`üß™ handleTestWebhookCommand called for user ${telegramId} with text: "${text}"`);
  const parts = text.split(" ");
  
  if (parts.length < 3) {
    await sendDirectMessage(telegramId, `üß™ –°–∏–º—É–ª—è—Ü–∏—è Tribute webhook\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/test_webhook new_subscription TELEGRAM_ID\n/test_webhook cancelled_subscription TELEGRAM_ID\n\n–ü—Ä–∏–º–µ—Ä:\n/test_webhook new_subscription 327223364`);
    return;
  }
  
  const [, eventType, targetTelegramId] = parts;
  const targetId = parseInt(targetTelegramId);
  
  if (!targetId || isNaN(targetId)) {
    await sendDirectMessage(telegramId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π telegram_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.");
    return;
  }
  
  if (!["new_subscription", "cancelled_subscription"].includes(eventType)) {
    await sendDirectMessage(telegramId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: new_subscription –∏–ª–∏ cancelled_subscription");
    return;
  }
  
  await sendDirectMessage(telegramId, `üß™ –°–∏–º—É–ª–∏—Ä—É—é ${eventType} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetId}...`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Tribute webhook –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const now = new Date().toISOString();
    
    let webhookPayload: any;
    
    if (eventType === "new_subscription") {
      webhookPayload = {
        subscription_name: "Support my art üåü",
        subscription_id: 999999,
        period_id: 888888, 
        period: "monthly",
        price: 500, // 5 –µ–≤—Ä–æ –≤ —Ü–µ–Ω—Ç–∞—Ö
        amount: 500,
        currency: "eur",
        user_id: 777777,
        telegram_user_id: targetId,
        channel_id: 666666,
        channel_name: "YAD Challenge Test",
        expires_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // +30 –¥–Ω–µ–π
      };
    } else {
      webhookPayload = {
        subscription_name: "Support my art üåü",
        subscription_id: 999999,
        period_id: 888888,
        period: "monthly", 
        price: 500,
        amount: 500,
        currency: "eur",
        user_id: 777777,
        telegram_user_id: targetId,
        channel_id: 666666,
        channel_name: "YAD Challenge Test",
        expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // +7 –¥–Ω–µ–π
        cancel_reason: "User cancelled subscription"
      };
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π webhook –≤ —Ñ–æ—Ä–º–∞—Ç–µ Tribute
    const fullWebhook = {
      created_at: now,
      name: eventType,
      payload: webhookPayload,
      sent_at: now
    };
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º HTTP request –∫ –Ω–∞—à–µ–º—É webhook endpoint
    const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
    const webhookUrl = `${SUPABASE_URL}/functions/v1/bot`;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å (–∑–∞–≥–ª—É—à–∫–∞)
    const testSignature = "test_signature_" + Math.random().toString(36).substring(7);
    
    const requestBody = JSON.stringify(fullWebhook);
    
    await sendDirectMessage(telegramId, `üì° –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π webhook...\n\nURL: ${webhookUrl}\n–¢–µ–ª–æ: ${requestBody.substring(0, 200)}...`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –∑–∞–ø—Ä–æ—Å
    const result = await fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "trbt-signature": testSignature,
        "X-Test-Webhook": "true" // –ú–∞—Ä–∫–µ—Ä —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π webhook
      },
      body: requestBody
    });
    
    if (result) {
      const resultData = await result.json();
      const status = result.status;
      
      if (status === 200) {
        await sendDirectMessage(telegramId, `‚úÖ Webhook —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n–û—Ç–≤–µ—Ç: ${JSON.stringify(resultData, null, 2)}`);
      } else {
        await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ (${status}):\n\n${JSON.stringify(resultData, null, 2)}`);
      }
    }
    
  } catch (error) {
    console.error("Error in test webhook command:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏: ${error.message}`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /open[—á–∏—Å–ª–æ] - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
 * –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
 */
async function handleOpenSlotsCommand(telegramId: number, text: string): Promise<void> {
  console.log(`üîì handleOpenSlotsCommand called with text: "${text}"`);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
  const match = text.match(/^\/open(\d+)$/);
  
  if (!match) {
    await sendDirectMessage(telegramId, 
      "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /open[—á–∏—Å–ª–æ]\n–ü—Ä–∏–º–µ—Ä: /open20 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç 20 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç");
    return;
  }
  
  const slotsToSet = parseInt(match[1]);
  
  if (slotsToSet <= 0) {
    await sendDirectMessage(telegramId, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
    return;
  }
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SlotManager
    const { SlotManager } = await import("./startCommand/flows/SlotManager.ts");
    const { MSG_SLOTS_OPENED, MSG_SLOTS_STATUS } = await import("./constants.ts");
    
    await sendDirectMessage(telegramId, `üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é ${slotsToSet} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç...`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
    await SlotManager.setAvailableSlots(slotsToSet, telegramId);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await SlotManager.getSlotStats();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    let report = MSG_SLOTS_OPENED(slotsToSet) + '\n\n';
    report += MSG_SLOTS_STATUS(stats.available, stats.total);
    
    await sendDirectMessage(telegramId, report);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ waitlist, —É–≤–µ–¥–æ–º–ª—è–µ–º –∏—Ö
    const waitlistProcessed = await processWaitlistUsers(slotsToSet);
    
    if (waitlistProcessed > 0) {
      await sendDirectMessage(telegramId, 
        `üì® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–ª–µ–Ω–æ ${waitlistProcessed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è`);
    }
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleOpenSlotsCommand:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ waitlist –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤—ã—Ö –º–µ—Å—Ç
 */
async function processWaitlistUsers(maxUsers: number): Promise<number> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ waitlist
    const { data: waitlistUsers, error: fetchError } = await supabase
      .from("users")
      .select("telegram_id, username, waitlist_position")
      .eq("waitlist", true)
      .order("waitlist_position", { ascending: true })
      .limit(maxUsers);
    
    if (fetchError) {
      throw fetchError;
    }
    
    const usersToProcess = waitlistUsers || [];
    
    if (usersToProcess.length === 0) {
      return 0;
    }
    
    let successCount = 0;
    
    for (const user of usersToProcess) {
      try {
        // –£–±–∏—Ä–∞–µ–º –∏–∑ waitlist
        const { error: updateError } = await supabase
          .from("users")
          .update({
            waitlist: false,
            waitlist_position: null,
            waitlist_added_at: null,
            user_state: null,
            updated_at: new Date().toISOString()
          })
          .eq("telegram_id", user.telegram_id);
        
        if (updateError) {
          throw updateError;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const { MSG_WAITLIST_OPENED } = await import("./constants.ts");
        await sendDirectMessage(user.telegram_id, MSG_WAITLIST_OPENED);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const { SetupProcess } = await import("./startCommand/states/SetupProcess.ts");
        await SetupProcess.startModeSelection(user.telegram_id);
        
        successCount++;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}:`, error);
      }
    }
    
    return successCount;
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ processWaitlistUsers:", error);
    return 0;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /slots - –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
 * –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
 */
async function handleSlotsStatusCommand(telegramId: number): Promise<void> {
  try {
    const { SlotManager } = await import("./startCommand/flows/SlotManager.ts");
    const { MSG_SLOTS_STATUS } = await import("./constants.ts");
    
    const stats = await SlotManager.getSlotStats();
    const statusMessage = MSG_SLOTS_STATUS(stats.available, stats.total);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ waitlist
    const { count: waitlistCount } = await supabase
      .from("users")
      .select("*", { count: "exact", head: true })
      .eq("waitlist", true);
    
    let report = statusMessage;
    
    if (waitlistCount && waitlistCount > 0) {
      report += `\n‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è: ${waitlistCount}`;
    }
    
    report += '\n\nüí° –ö–æ–º–∞–Ω–¥—ã:\n';
    report += '‚Ä¢ /open[—á–∏—Å–ª–æ] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç\n';
    report += '‚Ä¢ /close_slots - –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –º–µ—Å—Ç–∞ (waitlist —Ä–µ–∂–∏–º)\n';
    report += '‚Ä¢ /slots - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å';
    
    await sendDirectMessage(telegramId, report);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleSlotsStatusCommand:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /test_slots –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–ª–æ—Ç–æ–≤
 */
async function handleTestSlotsCommand(telegramId: number): Promise<void> {
  try {
    const { SlotManager } = await import("./startCommand/flows/SlotManager.ts");
    
    let report = "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–ª–æ—Ç–æ–≤:\n\n";
    
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    try {
      const availableSlots = await SlotManager.getAvailableSlots();
      report += `‚úÖ getAvailableSlots(): ${availableSlots}\n`;
    } catch (error) {
      report += `‚ùå getAvailableSlots(): ${error.message}\n`;
    }
    
    // –¢–µ—Å—Ç 1b: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ—Ç–æ–≤
    try {
      const totalSlots = await SlotManager.getTotalSlotsOpened();
      report += `‚úÖ getTotalSlotsOpened(): ${totalSlots}\n`;
    } catch (error) {
      report += `‚ùå getTotalSlotsOpened(): ${error.message}\n`;
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ hasAvailableSlots
    try {
      const hasSlots = await SlotManager.hasAvailableSlots();
      report += `‚úÖ hasAvailableSlots(): ${hasSlots}\n`;
    } catch (error) {
      report += `‚ùå hasAvailableSlots(): ${error.message}\n`;
    }
    
    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    try {
      const stats = await SlotManager.getSlotStats();
      report += `‚úÖ getSlotStats(): available=${stats.available}, total=${stats.total}\n`;
    } catch (error) {
      report += `‚ùå getSlotStats(): ${error.message}\n`;
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ waitlist –ª–æ–≥–∏–∫–∏
    try {
      const { WaitlistFlow } = await import("./startCommand/flows/WaitlistFlow.ts");
      const shouldWaitlist = await WaitlistFlow.shouldAddToWaitlist();
      report += `‚úÖ shouldAddToWaitlist(): ${shouldWaitlist}\n`;
    } catch (error) {
      report += `‚ùå shouldAddToWaitlist(): ${error.message}\n`;
    }
    
    // –¢–µ—Å—Ç 5: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–µ–π
    try {
      const { data: slotData } = await supabase
        .from("slot_settings")
        .select("id, available_slots, total_slots_opened, updated_at, updated_by")
        .eq("id", 1)
        .single();
      
      report += `\nüìã –î–∞–Ω–Ω—ã–µ –≤ –ë–î (—Ç–∞–±–ª–∏—Ü–∞ slot_settings):\n`;
      if (slotData) {
        report += `‚Ä¢ available_slots: ${slotData.available_slots}\n`;
        report += `‚Ä¢ total_slots_opened: ${slotData.total_slots_opened}\n`;
        report += `‚Ä¢ updated_at: ${slotData.updated_at}\n`;
        report += `‚Ä¢ updated_by: ${slotData.updated_by}\n`;
      } else {
        report += `‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∏ —Å id=1 –≤ —Ç–∞–±–ª–∏—Ü–µ slot_settings!\n`;
      }
    } catch (error) {
      report += `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${error.message}\n`;
    }
    
    report += "\nüí° –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É /open10 –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å–ª–æ—Ç–æ–≤";
    
    await sendDirectMessage(telegramId, report);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleTestSlotsCommand:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /close_slots –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
 */
async function handleCloseSlotsCommand(telegramId: number): Promise<void> {
  try {
    const { SlotManager } = await import("./startCommand/flows/SlotManager.ts");
    const { MSG_SLOTS_CLOSED, MSG_SLOTS_STATUS } = await import("./constants.ts");
    
    await sendDirectMessage(telegramId, "üîÑ –ó–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞...");
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞
    await SlotManager.closeAllSlots(telegramId);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await SlotManager.getSlotStats();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    let report = MSG_SLOTS_CLOSED + '\n\n';
    report += MSG_SLOTS_STATUS(stats.available, stats.total);
    
    await sendDirectMessage(telegramId, report);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleCloseSlotsCommand:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ—Å—Ç: ${error.message}`);
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /change_mode
 */
export async function handleChangeModeCommand(message: any): Promise<void> {
  const telegramId = message.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
  const user = await findUserByTelegramId(telegramId);
  if (!user) {
    await sendDirectMessage(telegramId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
    return;
  }
  
  if (!user.in_chat || (!user.subscription_active && (!user.subscription_days_left || user.subscription_days_left <= 0))) {
    await sendDirectMessage(telegramId, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start");
    return;
  }
  
  await handleChangeModeCommandInternal(message);
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /change_pace
 */
export async function handleChangePaceCommand(message: any): Promise<void> {
  const telegramId = message.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
  const user = await findUserByTelegramId(telegramId);
  if (!user) {
    await sendDirectMessage(telegramId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
    return;
  }
  
  if (!user.in_chat || (!user.subscription_active && (!user.subscription_days_left || user.subscription_days_left <= 0))) {
    await sendDirectMessage(telegramId, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start");
    return;
  }
  
  await handleChangePaceCommandInternal(message);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
 */
export async function handleHelpCommand(message: any): Promise<void> {
  const telegramId = message.from.id;
  
  const helpText = `
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É YAD Everyday**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ
‚Ä¢ /status - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**
‚Ä¢ /change_mode - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º (–¢–µ–∫—Å—Ç—ã/–ö–∞—Ä—Ç–∏–Ω–∫–∏)
‚Ä¢ /change_pace - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∏—Ç–º (–ö–∞–∂–¥—ã–π –¥–µ–Ω—å/–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
‚Ä¢ /pause - –í–∑—è—Ç—å –∫–∞–Ω–∏–∫—É–ª—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
‚Ä¢ /unpause - –î–æ—Å—Ä–æ—á–Ω–æ –≤—ã–π—Ç–∏ —Å –∫–∞–Ω–∏–∫—É–ª
‚Ä¢ /reminder - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏

**–£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ:**
–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å —Ç–µ–≥–æ–º #daily

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π:**
–£–ø—Ä–∞–≤–ª—è–π –ø–æ–¥–ø–∏—Å–∫–æ–π —á–µ—Ä–µ–∑ @tribute

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ @rrrtem
`;

  await sendDirectMessage(telegramId, helpText);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reminder - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
 */
export async function handleReminderCommand(message: any): Promise<void> {
  await handleReminderCommandInternal(message);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /tribute - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –±–æ—Ç—É Tribute –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
 */
export async function handleTributeCommand(message: any): Promise<void> {
  const telegramId = message.from.id;
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await findUserByTelegramId(telegramId);
    if (!user) {
      await sendDirectMessage(telegramId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—É—á–∞—Å—Ç–Ω–∏–∫ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π)
    if (!user.in_chat || (!user.subscription_active && (!user.subscription_days_left || user.subscription_days_left <= 0))) {
      await sendDirectMessage(telegramId, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start");
      return;
    }
    
    const tributeMessage = `
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π ‚Üí @tribute

‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
`;

    await sendDirectMessage(telegramId, tributeMessage);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleTributeCommand:", error);
    await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /update_menu - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é
 */
export async function handleUpdateMenuCommand(message: any): Promise<void> {
  const telegramId = message.from.id;
  
  try {
    console.log(`–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    await BotMenuManager.clearAllCommands();
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ 
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    await BotMenuManager.setDefaultCommands();
    
    await sendDirectMessage(telegramId, "‚úÖ –ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n–ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å:\n1. –ó–∞–∫—Ä–æ–π –∏ –æ—Ç–∫—Ä–æ–π —á–∞—Ç —Å –±–æ—Ç–æ–º\n2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ Telegram\n3. –ü–æ–¥–æ–∂–¥–∏ –¥–æ 24 —á–∞—Å–æ–≤ (–∫—ç—à Telegram)");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleUpdateMenuCommand:", error);
    await sendDirectMessage(telegramId, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é.");
  }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
 */
async function handleForceUpdateCommandsCommand(telegramId: number): Promise<void> {
  try {
    await sendDirectMessage(telegramId, "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...");
    
    console.log(`OWNER COMMAND: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...`);
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    await BotMenuManager.clearAllCommands();
    
    // –ñ–¥–µ–º –ø–æ–¥–æ–ª—å—à–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    await BotMenuManager.setDefaultCommands();
    
    await sendDirectMessage(telegramId, "‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleForceUpdateCommandsCommand:", error);
    await sendDirectMessage(telegramId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.");
  }
}

/**
 * –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —á–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_chat –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!
 */
async function handleBroadcastChatCommand(telegramId: number, text: string): Promise<void> {
  console.log(`üì° BROADCAST_CHAT: –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ ${telegramId}`);
  console.log(`üì° BROADCAST_CHAT: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã: "${text}"`);
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    const message = text.replace("/broadcast_chat ", "").trim();
    console.log(`üì° BROADCAST_CHAT: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
    
    if (!message) {
      console.log(`üì° BROADCAST_CHAT: –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º usage`);
      await sendDirectMessage(telegramId, MSG_BROADCAST_CHAT_USAGE);
      return;
    }
    
    console.log(`üì° BROADCAST_CHAT: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏`);
    await sendDirectMessage(telegramId, MSG_BROADCAST_STARTING_CHAT);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
    console.log(`üì° BROADCAST_CHAT: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î —Å in_chat=true`);
    const { data: users, error } = await supabase
      .from("users")
      .select("telegram_id, username")
      .eq("in_chat", true);
    
    if (error) {
      console.log(`üì° BROADCAST_CHAT: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î:`, error);
      throw error;
    }
    
    console.log(`üì° BROADCAST_CHAT: –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: ${users?.length || 0}`);
    if (users && users.length > 0) {
      console.log(`üì° BROADCAST_CHAT: –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, users.slice(0, 3));
    }
    
    if (!users || users.length === 0) {
      console.log(`üì° BROADCAST_CHAT: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`);
      await sendDirectMessage(telegramId, MSG_NO_USERS_IN_CHAT);
      return;
    }
    
    let successCount = 0;
    let failCount = 0;
    
    console.log(`üì° BROADCAST_CHAT: –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for (const user of users) {
      try {
        console.log(`üì° BROADCAST_CHAT: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (@${user.username})`);
        await sendDirectMessage(user.telegram_id, message);
        successCount++;
        console.log(`üì° BROADCAST_CHAT: ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        await new Promise(resolve => setTimeout(resolve, 50));
      } catch (error) {
        console.error(`üì° BROADCAST_CHAT: ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, error);
        failCount++;
      }
    }
    
    console.log(`üì° BROADCAST_CHAT: –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${failCount}`);
    
    // –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    const report = MSG_BROADCAST_COMPLETED(users.length, successCount, failCount, message, true);
    await sendDirectMessage(telegramId, report);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleBroadcastChatCommand:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: ${error.message}`);
  }
}

/**
 * –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ù–ï –≤ —á–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_nochat –ü—Ä–∏–≤–µ—Ç! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º
 */
async function handleBroadcastNoChatCommand(telegramId: number, text: string): Promise<void> {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    const message = text.replace("/broadcast_nochat ", "").trim();
    
    if (!message) {
      await sendDirectMessage(telegramId, MSG_BROADCAST_NOCHAT_USAGE);
      return;
    }
    
    await sendDirectMessage(telegramId, MSG_BROADCAST_STARTING_NOCHAT);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï –≤ —á–∞—Ç–µ
    const { data: users, error } = await supabase
      .from("users")
      .select("telegram_id, username")
      .eq("in_chat", false);
    
    if (error) {
      throw error;
    }
    
    if (!users || users.length === 0) {
      await sendDirectMessage(telegramId, MSG_NO_USERS_OUT_CHAT);
      return;
    }
    
    let successCount = 0;
    let failCount = 0;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for (const user of users) {
      try {
        await sendDirectMessage(user.telegram_id, message);
        successCount++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        await new Promise(resolve => setTimeout(resolve, 50));
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, error);
        failCount++;
      }
    }
    
    // –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    const report = MSG_BROADCAST_COMPLETED(users.length, successCount, failCount, message, false);
    await sendDirectMessage(telegramId, report);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleBroadcastNoChatCommand:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: ${error.message}`);
  }
}

/**
 * –ú–∞—Å—Å–æ–≤—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /status —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
 */
async function handleMassStatusCommand(telegramId: number): Promise<void> {
  try {
    await sendDirectMessage(telegramId, MSG_MASS_STATUS_STARTING);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
    const { data: users, error } = await supabase
      .from("users")
      .select("telegram_id, username")
      .eq("in_chat", true);
    
    if (error) {
      throw error;
    }
    
    if (!users || users.length === 0) {
      await sendDirectMessage(telegramId, MSG_NO_USERS_IN_CHAT);
      return;
    }
    
    let successCount = 0;
    let failCount = 0;
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of users) {
      try {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è handleStatusCommand
        const mockMessage = {
          from: { id: user.telegram_id },
          chat: { id: user.telegram_id }
        };
        
        await handleStatusCommand(mockMessage);
        successCount++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ /status –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}:`, error);
        failCount++;
      }
    }
    
    // –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    const report = MSG_MASS_STATUS_COMPLETED(users.length, successCount, failCount);
    await sendDirectMessage(telegramId, report);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleMassStatusCommand:", error);
    await sendDirectMessage(telegramId, `‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ /status: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–≤–æ–¥–∞
 */
export function isUserInInputState(user: any): boolean {
  if (!user) return false;
  
  const inputStates = [
    "waiting_promo",      // –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    "waiting_pause_days"  // –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–∞—É–∑—ã
  ];
  
  return inputStates.includes(user.user_state);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–æ –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –≤–≤–æ–¥–µ)
 */
export function isUserInSetupProcess(user: any): boolean {
  if (!user || !user.user_state) return false;
  
  // –ï—Å–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –≤–≤–æ–¥–µ - –Ω–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
  if (isUserInInputState(user)) return false;
  
  const setupStates = [
    "in_waitlist",
    "waiting_mode",
    "payment_link_sent"
  ];
  
  return setupStates.includes(user.user_state);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
 */
export function isActiveParticipant(user: any): boolean {
  if (!user) return false;
  
  return user.in_chat === true && 
         (user.subscription_active || (user.subscription_days_left && user.subscription_days_left > 0));
}

/**
 * –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function handleSmartTextMessage(message: any): Promise<void> {
  const telegramId = message.from.id;
  const text = message.text?.trim() || "";
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await findUserByTelegramId(telegramId);
  
  if (!user) {
    // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ /start
    console.log(`üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} - –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ /start`);
    await handleAutoStartCommandWrapper(message);
    return;
  }
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É
  const isInput = isUserInInputState(user);
  const isSetup = isUserInSetupProcess(user);
  const isActive = isActiveParticipant(user);
  
  if (isInput) {
    await handleTextMessage(message);
  } else if (isSetup) {
    await sendDirectMessage(telegramId, MSG_CONTINUE_SETUP_HINT);
  } else if (isActive) {
    await sendDirectMessage(telegramId, MSG_ACTIVE_USER_STATUS_HINT);
    await handleStatusCommand(message);
  } else {
    await handleStatusCommand(message);
  }
}