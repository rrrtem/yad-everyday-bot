import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { findUserByTelegramId, registerUser, sendDirectMessage, updateExistingUser } from "./userHandler.ts";
import { setWaitingPromoState } from "./commandHandler.ts";
import { 
  MSG_WELCOME, 
  MSG_MODE, 
  MSG_PACE, 
  MSG_PAYMENT_COND,
  MSG_PROMO,
  MSG_PROMO_ERR,
  MSG_LINK_CLUB,
  MSG_LINK_STANDARD,
  MSG_COMEBACK_RECEIVED,
  AVAILABLE_MODES,
  AVAILABLE_PACES,
  MODE_PACE_CONFIG,
  VALID_PROMO_CODES,
  DEFAULT_PAYMENT_URL,
  SPECIAL_PAYMENT_URL
} from "../constants.ts";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

if (!SUPABASE_URL || !SUPABASE_KEY || !TELEGRAM_BOT_TOKEN) {
  throw new Error("Missing Supabase or Telegram environment variables for startCommandHandler.");
}

const supabase: SupabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É A1 –∏–∑ logic.md
 */
export async function handleStartCommand(message: any): Promise<void> {
  const telegramId = message.from.id;
  
  // –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let user = await findUserByTelegramId(telegramId);
  
  if (!user) {
    // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
    await registerUser(message.from);
    user = await findUserByTelegramId(telegramId);
  } else {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    await updateExistingUser(telegramId, message.from);
    user = await findUserByTelegramId(telegramId);
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if (await hasUnusedSubscriptionDays(user)) {
      await sendDirectMessage(telegramId, MSG_COMEBACK_RECEIVED);
      // TODO: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
      return;
    }
  }
  
  // –®–∞–≥ 3: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
  await sendDirectMessage(telegramId, MSG_WELCOME);
  
  // –®–∞–≥ 4: –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —É—á–∞—Å—Ç–∏—è
  await sendModeSelection(telegramId);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function hasUnusedSubscriptionDays(user: any): Promise<boolean> {
  if (!user.subscription_days_left) return false;
  return user.subscription_days_left > 0;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞ —É—á–∞—Å—Ç–∏—è
 */
async function sendModeSelection(telegramId: number): Promise<void> {
  const keyboard = {
    inline_keyboard: [
      [
        { text: "üìù –¢–µ–∫—Å—Ç—ã", callback_data: `mode_${AVAILABLE_MODES.TEXT}` },
        { text: "üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∏", callback_data: `mode_${AVAILABLE_MODES.IMAGE}` }
      ]
    ]
  };
  
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: telegramId,
      text: MSG_MODE,
      parse_mode: "Markdown",
      reply_markup: keyboard
    })
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function handleModeSelection(telegramId: number, mode: string): Promise<void> {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ –ë–î
  const now = new Date().toISOString();
  const { error } = await supabase
    .from("users")
    .update({
      mode: mode,
      mode_changed_at: now,
      updated_at: now
    })
    .eq("telegram_id", telegramId);
    
  if (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞:", error);
    await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
    return;
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ä–∏—Ç–º–∞
  await sendPaceSelection(telegramId, mode);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∏—Ç–º–∞ —É—á–∞—Å—Ç–∏—è
 */
async function sendPaceSelection(telegramId: number, mode: string): Promise<void> {
  const availablePaces = MODE_PACE_CONFIG[mode];
  
  if (mode === AVAILABLE_MODES.IMAGE) {
    // –î–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º
    await handlePaceSelection(telegramId, AVAILABLE_PACES.DAILY);
    return;
  }
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: "‚è∞ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data: `pace_${AVAILABLE_PACES.DAILY}` },
        { text: "üìÖ –û–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data: `pace_${AVAILABLE_PACES.WEEKLY}` }
      ]
    ]
  };
  
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: telegramId,
      text: MSG_PACE(mode),
      parse_mode: "Markdown",
      reply_markup: keyboard
    })
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∏—Ç–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function handlePaceSelection(telegramId: number, pace: string): Promise<void> {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∏—Ç–º –≤ –ë–î
  const now = new Date().toISOString();
  const { error } = await supabase
    .from("users")
    .update({
      pace: pace,
      pace_changed_at: now,
      updated_at: now
    })
    .eq("telegram_id", telegramId);
    
  if (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∏—Ç–º–∞:", error);
    await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
    return;
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
  await sendDirectMessage(telegramId, MSG_PAYMENT_COND);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—É–±–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  await checkClubStatusAndSendPayment(telegramId);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–ª—É–±–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
 */
async function checkClubStatusAndSendPayment(telegramId: number): Promise<void> {
  const user = await findUserByTelegramId(telegramId);
  
  if (user.club === true) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–ª—É–±–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    await sendDirectMessage(telegramId, MSG_LINK_CLUB(SPECIAL_PAYMENT_URL));
    await recordPaymentLinkSent(telegramId);
  } else {
    // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø—Ä–æ–º–æ–∫–æ–¥
    await sendPromoSelection(telegramId);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞
 */
async function sendPromoSelection(telegramId: number): Promise<void> {
  const keyboard = {
    inline_keyboard: [
      [{ text: "üí≥ –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data: "no_promo" }]
    ]
  };
  
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: telegramId,
      text: MSG_PROMO + "\n\n_–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ._",
      parse_mode: "Markdown",
      reply_markup: keyboard
    })
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
  await setWaitingPromoState(telegramId);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function handlePromoCode(telegramId: number, promoCode: string): Promise<void> {
  console.log(`handlePromoCode: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –≤–≤–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥ "${promoCode}"`);
  console.log(`handlePromoCode: –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:`, VALID_PROMO_CODES);
  
  if (VALID_PROMO_CODES.includes(promoCode.toUpperCase())) {
    console.log(`handlePromoCode: –ø—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" –≤–∞–ª–∏–¥–Ω—ã–π`);
    // –ü—Ä–æ–º–æ–∫–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π
    const now = new Date().toISOString();
    const { error } = await supabase
      .from("users")
      .update({
        club: true,
        promo_code: promoCode.toUpperCase(),
        user_state: null, // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        updated_at: now
      })
      .eq("telegram_id", telegramId);
      
    if (error) {
      console.error(`handlePromoCode: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:`, error);
      await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
      return;
    }
      
    await sendDirectMessage(telegramId, MSG_LINK_CLUB(SPECIAL_PAYMENT_URL));
    await recordPaymentLinkSent(telegramId);
    console.log(`handlePromoCode: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª—É–±–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
  } else {
    console.log(`handlePromoCode: –ø—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π`);
    // –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π - –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
    await sendDirectMessage(telegramId, MSG_PROMO_ERR);
    // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º sendPromoSelection –ø–æ–≤—Ç–æ—Ä–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    console.log(`handlePromoCode: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
 */
export async function handleNoPromo(telegramId: number): Promise<void> {
  await sendDirectMessage(telegramId, MSG_LINK_STANDARD(DEFAULT_PAYMENT_URL));
  await recordPaymentLinkSent(telegramId);
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
 */
async function recordPaymentLinkSent(telegramId: number): Promise<void> {
  const now = new Date().toISOString();
  await supabase
    .from("users")
    .update({
      payment_link_sent: now,
      updated_at: now
    })
    .eq("telegram_id", telegramId);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query –æ—Ç inline –∫–Ω–æ–ø–æ–∫
 */
export async function handleStartCallbackQuery(callbackQuery: any): Promise<void> {
  const data = callbackQuery.data;
  const telegramId = callbackQuery.from.id;
  
  if (data.startsWith("mode_")) {
    const mode = data.replace("mode_", "");
    await handleModeSelection(telegramId, mode);
  } else if (data.startsWith("pace_")) {
    const pace = data.replace("pace_", "");
    await handlePaceSelection(telegramId, pace);
  } else if (data === "no_promo") {
    await handleNoPromo(telegramId);
  }
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
  await fetch(`${TELEGRAM_API}/answerCallbackQuery`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      callback_query_id: callbackQuery.id
    })
  });
} 