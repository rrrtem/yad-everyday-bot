import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { findUserByTelegramId, sendDirectMessage } from "./userHandler.ts";
import {
  MSG_REMINDERS_ENABLED,
  MSG_REMINDERS_DISABLED,
  CALLBACK_TOGGLE_PUBLIC_REMINDER
} from "./constants.ts";
import { BotMenuManager } from "./utils/botMenuManager.ts";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

if (!SUPABASE_URL || !SUPABASE_KEY || !TELEGRAM_BOT_TOKEN) {
  throw new Error("Missing Supabase or Telegram environment variables for reminderHandler.");
}

const supabase: SupabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
 */
async function sendReminderToggleMessage(telegramId: number, currentReminderState: boolean): Promise<void> {
  try {
    const statusText = currentReminderState 
      ? "üîî –ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å <b>–≤–∫–ª—é—á–µ–Ω—ã</b>"
      : "üîï –ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å <b>–æ—Ç–∫–ª—é—á–µ–Ω—ã</b>";
    
    const buttonText = currentReminderState 
      ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
      : "üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è";
    
    const callbackData = CALLBACK_TOGGLE_PUBLIC_REMINDER;
    
    const message = `${statusText}

–ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∏—Ç–º–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç —Å–µ–≥–æ–¥–Ω—è.`;

    const keyboard = {
      inline_keyboard: [
        [{ text: buttonText, callback_data: callbackData }]
      ]
    };

    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: telegramId,
        text: message,
        parse_mode: "HTML",
        reply_markup: keyboard
      })
    });

    const result = await response.json();
    if (!result.ok) {
      console.error("Failed to send reminder toggle message:", result);
      // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
      await sendDirectMessage(telegramId, message);
    }
  } catch (error) {
    console.error("Error sending reminder toggle message:", error);
    // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    const fallbackMessage = currentReminderState 
      ? "üîî –ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
      : "üîï –ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã";
    await sendDirectMessage(telegramId, fallbackMessage);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reminder - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π
 */
export async function handleReminderCommand(message: any): Promise<void> {
  console.log("handleReminderCommand called", JSON.stringify(message));

  if (!message || !message.from) {
    console.log("handleReminderCommand: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏");
    return;
  }

  const telegramId = message.from.id;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–Ω
    const user = await findUserByTelegramId(telegramId);
    
    if (!user) {
      console.log(`handleReminderCommand: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      await sendDirectMessage(telegramId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤ —á–∞—Ç–µ –∏–ª–∏ –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É)
    const isActive = user.in_chat || user.subscription_active || user.subscription_days_left > 0;
    
    if (!isActive) {
      console.log(`handleReminderCommand: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω`);
      await sendDirectMessage(telegramId, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start");
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    const currentReminderState = user.public_remind !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
    console.log(`handleReminderCommand: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentReminderState}`);
    await sendReminderToggleMessage(telegramId, currentReminderState);

  } catch (error) {
    console.error(`handleReminderCommand: –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`, error);
    await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
 */
export async function handleToggleReminderCallback(callbackQuery: any): Promise<void> {
  console.log("handleToggleReminderCallback called", JSON.stringify(callbackQuery));

  if (!callbackQuery || !callbackQuery.from || !callbackQuery.data) {
    console.log("handleToggleReminderCallback: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ callback");
    return;
  }

  const telegramId = callbackQuery.from.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await findUserByTelegramId(telegramId);
    
    if (!user) {
      console.log(`handleToggleReminderCallback: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      await answerCallbackQuery(callbackQuery.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", true);
      return;
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
    const currentReminderState = user.public_remind !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
    const newReminderState = !currentReminderState;

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ë–î
    const now = new Date().toISOString();
    const { error } = await supabase
      .from("users")
      .update({
        public_remind: newReminderState,
        updated_at: now
      })
      .eq("telegram_id", telegramId);

    if (error) {
      console.error(`handleToggleReminderCallback: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${telegramId}:`, error.message);
      await answerCallbackQuery(callbackQuery.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", true);
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmMessage = newReminderState ? MSG_REMINDERS_ENABLED : MSG_REMINDERS_DISABLED;
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    const callbackMessage = newReminderState 
      ? "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" 
      : "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã";
    
    await answerCallbackQuery(callbackQuery.id, callbackMessage);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    await sendReminderToggleMessage(telegramId, newReminderState);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await BotMenuManager.updateUserMenu(telegramId);

    console.log(`handleToggleReminderCallback: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newReminderState}`);

  } catch (error) {
    console.error(`handleToggleReminderCallback: –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`, error);
    await answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", true);
  }
}

/**
 * –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query
 */
async function answerCallbackQuery(callbackQueryId: string, text?: string, showAlert = false): Promise<void> {
  try {
    await fetch(`${TELEGRAM_API}/answerCallbackQuery`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text,
        show_alert: showAlert
      })
    });
  } catch (error) {
    console.error("Error answering callback query:", error);
  }
} 