import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { sendDirectMessage } from "../bot/userHandler.ts";
import { 
  MSG_STRIKE_FIRST,
  MSG_STRIKE_SECOND,
  MSG_STRIKE_THIRD,
  MSG_STRIKE_FOURTH,
  MSG_PAUSE_EXPIRED_REMOVED,
  MSG_SUBSCRIPTION_ENDING_REMINDER,
  MSG_SUBSCRIPTION_EXPIRED,
  MSG_REMOVED_SUBSCRIPTION_EXPIRED,
  MSG_PUBLIC_DEADLINE_REMINDER,
  MSG_DAILY_CRON_REPORT,
  AUTO_PAUSE_DAYS,
  SUBSCRIPTION_REMINDER_DAYS,
  OWNER_TELEGRAM_ID,
  PUBLIC_REMINDER_THREAD_ID_TEXT,
  PUBLIC_REMINDER_THREAD_ID_IMAGE
} from "../constants.ts";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;
const TELEGRAM_GROUP_CHAT_ID = Deno.env.get("TELEGRAM_GROUP_CHAT_ID");
if (!TELEGRAM_GROUP_CHAT_ID) {
  throw new Error("TELEGRAM_GROUP_CHAT_ID is not set in environment variables!");
}

if (!SUPABASE_URL || !SUPABASE_KEY || !TELEGRAM_BOT_TOKEN) {
  throw new Error("Missing Supabase or Telegram environment variables for cron functions.");
}

const supabase: SupabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);

/**
 * –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (dailyCron) - —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –ë2 –∏–∑ logic.md
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 04:00 UTC –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
 */
export async function dailyCron(): Promise<Response> {
  const now = new Date();
  const startTime = Date.now();
  
  console.log(`\n=== DAILY CRON STARTED ===`);
  console.log(`üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${now.toISOString()}`);
  console.log(`üåê UTC: ${now.getUTCHours()}:${now.getUTCMinutes()}:${now.getUTCSeconds()}`);
  console.log(`üìÖ –î–∞—Ç–∞: ${now.toDateString()}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log(`üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î...`);
  const usersRes = await supabase
    .from("users")
    .select("*");
    
  if (usersRes.error) {
    console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", usersRes.error);
    console.error("‚ùå Stack trace:", usersRes.error.stack || '–Ω–µ—Ç —Å—Ç–µ–∫–∞');
    return new Response(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersRes.error.message}`, { status: 500 });
  }
  
  const users = usersRes.data || [];
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î`);
  
  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const activeUsers = users.filter(u => u.in_chat && u.is_active);
  const dailyUsers = activeUsers.filter(u => u.pace === "daily");
  const weeklyUsers = activeUsers.filter(u => u.pace === "weekly");
  const pausedUsers = users.filter(u => u.pause_until && new Date(u.pause_until) > now);
  
  console.log(`üìà –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   - –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers.length}`);
  console.log(`   - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∏—Ç–º: ${dailyUsers.length}`);
  console.log(`   - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–∏—Ç–º: ${weeklyUsers.length}`);
  console.log(`   - –ù–∞ –ø–∞—É–∑–µ: ${pausedUsers.length}`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
  const stats = {
    totalActive: 0,
    postsToday: 0,
    noPosts: 0,
    newStrikes: [] as Array<{username: string, strikes: number}>,
    riskyUsers: [] as Array<{username: string, strikes: number}>,
    autoPaused: [] as Array<{username: string}>,
    pauseCompleted: [] as Array<{username: string}>,
    pauseExpiredRemoved: [] as Array<{username: string}>,
    currentlyPaused: [] as Array<{username: string, pauseUntil: string}>,
    subscriptionWarnings: [] as Array<{username: string, daysLeft: number}>,
    subscriptionRemoved: [] as Array<{username: string}>,
    dangerousCases: [] as Array<{username: string, reason: string}>
  };

  console.log(`\nüîç –§–ê–ó–ê 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º —Ä–∏—Ç–º–æ–º`);

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º —Ä–∏—Ç–º–æ–º
  for (const user of users) {
    if (user.in_chat && user.is_active && user.pace === "daily") {
      stats.totalActive++;
      
      if (user.post_today) {
        stats.postsToday++;
      } else {
        stats.noPosts++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞ –ø–∞—É–∑–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (user.pause_until && new Date(user.pause_until) > now) {
          continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞—É–∑–µ
        }
        
        const newStrikes = (user.strikes_count || 0) + 1;
        let messageToSend = "";
        let updateData: any = {
          strikes_count: newStrikes,
          updated_at: now.toISOString()
        };
        
        switch (newStrikes) {
          case 1:
            messageToSend = MSG_STRIKE_FIRST;
            break;
          case 2:
            messageToSend = MSG_STRIKE_SECOND;
            break;
          case 3:
            messageToSend = MSG_STRIKE_THIRD;
            stats.riskyUsers.push({username: user.username || String(user.telegram_id), strikes: newStrikes});
            break;
          case 4:
            messageToSend = MSG_STRIKE_FOURTH;
            updateData.pause_started_at = now.toISOString();
            updateData.pause_until = new Date(now.getTime() + AUTO_PAUSE_DAYS * 24 * 60 * 60 * 1000).toISOString();
            updateData.pause_days = AUTO_PAUSE_DAYS;
            stats.autoPaused.push({username: user.username || String(user.telegram_id)});
            break;
        }
        
        if (newStrikes <= 4) {
          await supabase
            .from("users")
            .update(updateData)
            .eq("telegram_id", user.telegram_id);
            
          await sendDirectMessage(user.telegram_id, messageToSend);
          
          if (newStrikes < 4) {
            stats.newStrikes.push({username: user.username || String(user.telegram_id), strikes: newStrikes});
          }
        }
      }
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞—É–∑–µ
  console.log(`\nüîç –§–ê–ó–ê 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞—É–∑–µ (${pausedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
  for (const user of users) {
    if (user.pause_until) {
      const pauseEnd = new Date(user.pause_until);
      if (pauseEnd <= now) {
        console.log(`‚è∞ –ü–∞—É–∑–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è ${user.username || user.telegram_id}, strikes: ${user.strikes_count}`);
        // –ü–∞—É–∑–∞ –∏—Å—Ç–µ–∫–ª–∞
        if (user.strikes_count === 4) {
          console.log(`üö® –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username || user.telegram_id} –∏–∑ —á–∞—Ç–∞ (4 —Å—Ç—Ä–∞–π–∫–∞)`);
          // –£–¥–∞–ª—è–µ–º –∏–∑ —á–∞—Ç–∞
          try {
            await fetch(`${TELEGRAM_API}/kickChatMember`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                chat_id: TELEGRAM_GROUP_CHAT_ID,
                user_id: user.telegram_id
              })
            });
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username || user.telegram_id} —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞`);
          } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username || user.telegram_id}:`, err);
          }
          
          await supabase
            .from("users")
            .update({
              in_chat: false,
              is_active: false,
              strikes_count: 0,
              pause_started_at: null,
              pause_until: null,
              pause_days: 0,
              left_at: now.toISOString(),
              updated_at: now.toISOString()
            })
            .eq("telegram_id", user.telegram_id);
            
          await sendDirectMessage(user.telegram_id, MSG_PAUSE_EXPIRED_REMOVED);
          stats.pauseExpiredRemoved.push({username: user.username || String(user.telegram_id)});
        } else {
          console.log(`‚úÖ –°–Ω–∏–º–∞–µ–º —Å –ø–∞—É–∑—ã ${user.username || user.telegram_id} (–±—ã–ª –ø–æ—Å—Ç –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã)`);
          // –ë—ã–ª –ø–æ—Å—Ç –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã - —Å–Ω–∏–º–∞–µ–º —Å –ø–∞—É–∑—ã
          await supabase
            .from("users")
            .update({
              pause_started_at: null,
              pause_until: null,
              pause_days: 0,
              updated_at: now.toISOString()
            })
            .eq("telegram_id", user.telegram_id);
            
          stats.pauseCompleted.push({username: user.username || String(user.telegram_id)});
        }
      } else {
        // –í—Å–µ –µ—â–µ –Ω–∞ –ø–∞—É–∑–µ
        stats.currentlyPaused.push({
          username: user.username || String(user.telegram_id),
          pauseUntil: pauseEnd.toLocaleDateString('ru-RU')
        });
      }
    }
  }

  // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ subscription_days_left (–æ—Å—Ç–∞—Ç–æ–∫ —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–∑–æ–Ω–∞)
  console.log(`\nüîç –§–ê–ó–ê 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ subscription_days_left`);
  let subscriptionProcessed = 0;
  for (const user of users) {
    if (user.subscription_days_left > 0 && user.is_active && user.subscription_active === false) {
      subscriptionProcessed++;
      const newDaysLeft = user.subscription_days_left - 1;
      console.log(`üìâ ${user.username || user.telegram_id}: ${user.subscription_days_left} -> ${newDaysLeft} –¥–Ω–µ–π`);
      
      if (newDaysLeft === SUBSCRIPTION_REMINDER_DAYS) {
        console.log(`‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${user.username || user.telegram_id} (${newDaysLeft} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)`);
        await sendDirectMessage(user.telegram_id, MSG_SUBSCRIPTION_ENDING_REMINDER);
        stats.subscriptionWarnings.push({username: user.username || String(user.telegram_id), daysLeft: newDaysLeft});
      } else if (newDaysLeft === 0) {
        console.log(`üö® –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ —É ${user.username || user.telegram_id}`);
        await sendDirectMessage(user.telegram_id, MSG_SUBSCRIPTION_EXPIRED);
        await supabase
          .from("users")
          .update({
            expires_at: now.toISOString(),
            is_active: false,
            subscription_days_left: 0,
            updated_at: now.toISOString()
          })
          .eq("telegram_id", user.telegram_id);
      } else {
        await supabase
          .from("users")
          .update({
            subscription_days_left: newDaysLeft,
            updated_at: now.toISOString()
          })
          .eq("telegram_id", user.telegram_id);
      }
    }
  }
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptionProcessed}`);

  // 4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
  console.log(`\nüîç –§–ê–ó–ê 4: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π`);
  let expiredRemoved = 0;
  for (const user of users) {
    if (user.is_active && user.expires_at && new Date(user.expires_at) <= now && user.subscription_days_left === 0) {
      expiredRemoved++;
      console.log(`üö® –£–¥–∞–ª—è–µ–º ${user.username || user.telegram_id} (–ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞)`);
      try {
        await fetch(`${TELEGRAM_API}/kickChatMember`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: TELEGRAM_GROUP_CHAT_ID,
            user_id: user.telegram_id
          })
        });
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username || user.telegram_id} —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞`);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username || user.telegram_id}:`, err);
      }
      
      await supabase
        .from("users")
        .update({
          in_chat: false,
          is_active: false,
          updated_at: now.toISOString()
        })
        .eq("telegram_id", user.telegram_id);
        
      await sendDirectMessage(user.telegram_id, MSG_REMOVED_SUBSCRIPTION_EXPIRED);
      stats.subscriptionRemoved.push({username: user.username || String(user.telegram_id)});
    }
  }
  console.log(`üìä –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${expiredRemoved}`);

  // 5. –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
  console.log(`\nüîç –§–ê–ó–ê 5: –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ post_today`);
  const resetResult = await supabase
    .from("users")
    .update({ post_today: false })
    .neq("post_today", false);
    
  if (resetResult.error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ post_today:`, resetResult.error);
  } else {
    console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω—ã —Ñ–ª–∞–≥–∏ post_today`);
  }

  // 5.1. –ê–Ω–∞–ª–∏–∑ –æ–ø–∞—Å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞)
  console.log(`\nüîç –§–ê–ó–ê 6: –ê–Ω–∞–ª–∏–∑ –æ–ø–∞—Å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤`);
  for (const user of users) {
    const username = user.username || String(user.telegram_id);
    
    // –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å 3 —Å—Ç—Ä–∞–π–∫–∞–º–∏
    if (user.strikes_count === 3 && user.is_active) {
      stats.dangerousCases.push({
        username,
        reason: "3 —Å—Ç—Ä–∞–π–∫–∞ - –Ω–∞ –≥—Ä–∞–Ω–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
      });
    }
    
    // –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ —Å—Ç—Ä–∞–π–∫–∞–º–∏
    if (user.subscription_days_left <= 3 && user.subscription_days_left > 0 && user.strikes_count > 0) {
      stats.dangerousCases.push({
        username,
        reason: `–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${user.subscription_days_left} –¥–Ω. + ${user.strikes_count} —Å—Ç—Ä–∞–π–∫(–∞)`
      });
    }
    
    // –ù–æ–≤—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≤ —á–∞—Ç–µ, –Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)
    if (user.in_chat && !user.is_active && user.created_at) {
      const createdDate = new Date(user.created_at);
      const daysSinceCreated = Math.floor((now.getTime() - createdDate.getTime()) / (24 * 60 * 60 * 1000));
      if (daysSinceCreated <= 7) { // –ù–æ–≤—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        stats.dangerousCases.push({
          username,
          reason: `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (${daysSinceCreated} –¥–Ω.)`
        });
      }
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —á–∞—Ç–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (is_active = true, –Ω–æ expires_at <= now() –∏ subscription_days_left = 0)
    if (user.is_active && user.expires_at && new Date(user.expires_at) <= now && user.subscription_days_left === 0) {
      stats.dangerousCases.push({
        username,
        reason: "–ê–∫—Ç–∏–≤–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
      });
    }
  }

  // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
  console.log(`\nüîç –§–ê–ó–ê 7: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É (${OWNER_TELEGRAM_ID})`);
  try {
    const report = MSG_DAILY_CRON_REPORT(stats);
    await sendDirectMessage(OWNER_TELEGRAM_ID, report);
    console.log(`‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É`);
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É:`, err);
  }

  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const endTime = Date.now();
  const executionTime = endTime - startTime;
  
  console.log(`\n=== DAILY CRON COMPLETED ===`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`);
  console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalActive}`);
  console.log(`   - –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å—Ç—ã: ${stats.postsToday}`);
  console.log(`   - –ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: ${stats.noPosts}`);
  console.log(`   - –ù–æ–≤—ã—Ö —Å—Ç—Ä–∞–π–∫–æ–≤: ${stats.newStrikes.length}`);
  console.log(`   - –ê–≤—Ç–æ–ø–∞—É–∑: ${stats.autoPaused.length}`);
  console.log(`   - –£–¥–∞–ª–µ–Ω–∏–π: ${stats.pauseExpiredRemoved.length + stats.subscriptionRemoved.length}`);
  console.log(`   - –ù–∞ –ø–∞—É–∑–µ: ${stats.currentlyPaused.length}`);
  console.log(`   - –û–ø–∞—Å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: ${stats.dangerousCases.length}`);
  console.log(`üèÅ Daily cron –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ ${new Date().toISOString()}`);

  return new Response(JSON.stringify({
    message: "dailyCron –∑–∞–≤–µ—Ä—à—ë–Ω",
    executionTime,
    stats
  }), { status: 200, headers: { "Content-Type": "application/json" } });
}

/**
 * –ü—É–±–ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 20:00 UTC (publicDeadlineReminder)
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –ë3 –∏–∑ logic.md
 */
export async function publicDeadlineReminder(): Promise<Response> {
  const now = new Date();
  const startTime = Date.now();
  
  console.log(`\n=== PUBLIC REMINDER STARTED ===`);
  console.log(`üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${now.toISOString()}`);
  console.log(`üåê UTC: ${now.getUTCHours()}:${now.getUTCMinutes()}:${now.getUTCSeconds()}`);
  
  // –ö–æ–Ω–µ—Ü –¥–Ω—è ‚Äî 04:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –ø–æ UTC (–≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ dailyCron)
  const endOfDay = new Date(now);
  endOfDay.setUTCHours(4, 0, 0, 0);
  
  // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ—Å–ª–µ 04:00, —Ç–æ –∫–æ–Ω–µ—Ü –¥–Ω—è ‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ 04:00
  if (now.getUTCHours() >= 4) {
    endOfDay.setUTCDate(endOfDay.getUTCDate() + 1);
  }
  
  const diffMs = endOfDay.getTime() - now.getTime();
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));

  console.log(`‚è∞ –î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è (04:00 UTC): ${diffHours}—á ${diffMinutes}–º–∏–Ω`);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å
  console.log(`üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î...`);
  const usersRes = await supabase
    .from("users")
    .select("username, mode, pace, in_chat, is_active, pause_until, public_remind, post_today");
    
  if (usersRes.error) {
    console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", usersRes.error);
    return new Response(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersRes.error.message}`, { status: 500 });
  }
  
  const users = usersRes.data || [];
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  
  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const activeDailyUsers = users.filter(u => u.in_chat && u.is_active && u.pace === "daily");
  console.log(`üîç –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å pace="daily": ${activeDailyUsers.length}`);
  if (activeDailyUsers.length > 0) {
    console.log(`   üìã –°–ø–∏—Å–æ–∫: ${activeDailyUsers.map(u => `${u.username}(${u.pace})`).join(', ')}`);
  }
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  console.log(`\nüîé –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:`);
  for (const user of activeDailyUsers.slice(0, 5)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    console.log(`üë§ ${user.username}:`);
    console.log(`   - mode: "${user.mode}" (trimmed: "${user.mode?.trim()}")`);
    console.log(`   - post_today: ${user.post_today}`);
    console.log(`   - public_remind: ${user.public_remind}`);
    console.log(`   - pause_until: ${user.pause_until}`);
    console.log(`   - username: ${user.username ? '–µ—Å—Ç—å' : '–ù–ï–¢'}`);
  }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Å–ª–æ–≤–∏—è–º –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  const textUsers = users.filter(u => 
    u.in_chat && 
    u.is_active && 
    u.pace === "daily" &&                                 // –¢–û–õ–¨–ö–û –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∏—Ç–º!
    (!u.pause_until || new Date(u.pause_until) <= now) &&
    u.public_remind && 
    !u.post_today && 
    u.mode?.trim() === "text" &&                          // TRIM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è \n!
    u.username
  );
  
  const imageUsers = users.filter(u => 
    u.in_chat && 
    u.is_active && 
    u.pace === "daily" &&                                 // –¢–û–õ–¨–ö–û –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∏—Ç–º!
    (!u.pause_until || new Date(u.pause_until) <= now) &&
    u.public_remind && 
    !u.post_today && 
    u.mode?.trim() === "image" &&                         // TRIM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è \n!
    u.username
  );
  
  console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–¢–û–õ–¨–ö–û pace="daily"):`);
  console.log(`   - –†–µ–∂–∏–º "text": ${textUsers.length} —á–µ–ª.`);
  console.log(`   - –†–µ–∂–∏–º "image": ${imageUsers.length} —á–µ–ª.`);
  
  if (textUsers.length > 0) {
    console.log(`   üìù Text –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${textUsers.map(u => u.username).join(', ')}`);
  }
  if (imageUsers.length > 0) {
    console.log(`   üñºÔ∏è Image –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${imageUsers.map(u => u.username).join(', ')}`);
  }
  
  let sentReminders = 0;
  const allUsernames: string[] = [];

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
  let timeLeftMsg = "";
  if (diffHours > 0) {
    timeLeftMsg = `–î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å ${diffHours} ${pluralizeHours(diffHours)}!`;
  } else {
    timeLeftMsg = `–î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —á–∞—Å–∞! (${diffMinutes} –º–∏–Ω—É—Ç)`;
  }

  console.log(`üí¨ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: "${timeLeftMsg}"`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏–∫–æ–≤
  if (textUsers.length > 0) {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è text –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç—Ä–µ–¥ ${PUBLIC_REMINDER_THREAD_ID_TEXT}...`);
    const usernames = textUsers.map(u => u.username);
    allUsernames.push(...usernames);
    const text = MSG_PUBLIC_DEADLINE_REMINDER(usernames, timeLeftMsg);
    
    try {
      const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: TELEGRAM_GROUP_CHAT_ID,
          message_thread_id: PUBLIC_REMINDER_THREAD_ID_TEXT,
          text,
        })
      });
      
      if (response.ok) {
        console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è text –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        sentReminders++;
      } else {
        const errorData = await response.text();
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è text: ${response.status} - ${errorData}`);
      }
    } catch (err) {
      console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è text:`, err);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω—â–∏–∫–æ–≤
  if (imageUsers.length > 0) {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è image –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç—Ä–µ–¥ ${PUBLIC_REMINDER_THREAD_ID_IMAGE}...`);
    const usernames = imageUsers.map(u => u.username);
    allUsernames.push(...usernames);
    const text = MSG_PUBLIC_DEADLINE_REMINDER(usernames, timeLeftMsg);
    
    try {
      const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: TELEGRAM_GROUP_CHAT_ID,
          message_thread_id: PUBLIC_REMINDER_THREAD_ID_IMAGE,
          text,
        })
      });
      
      if (response.ok) {
        console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è image –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        sentReminders++;
      } else {
        const errorData = await response.text();
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è image: ${response.status} - ${errorData}`);
      }
    } catch (err) {
      console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è image:`, err);
    }
  }

  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const endTime = Date.now();
  const executionTime = endTime - startTime;
  
  console.log(`\n=== PUBLIC REMINDER COMPLETED ===`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`);
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentReminders} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ ${sentReminders} —Ç—Ä–µ–¥–æ–≤`);
  console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö: ${allUsernames.length}`);
  console.log(`üèÅ Public reminder –∑–∞–≤–µ—Ä—à–µ–Ω –≤ ${new Date().toISOString()}`);

  if (sentReminders === 0) {
    console.log(`‚ÑπÔ∏è –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`);
    return new Response(JSON.stringify({ 
      message: "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
      executionTime 
    }), { status: 200 });
  }

  return new Response(JSON.stringify({ 
    message: "–ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", 
    usernames: allUsernames, 
    timeLeftMsg,
    sentToThreads: sentReminders,
    executionTime
  }), { status: 200 });
}

function pluralizeHours(n: number) {
  const abs = Math.abs(n);
  if (abs === 1) return '—á–∞—Å';
  if (abs >= 2 && abs <= 4) return '—á–∞—Å–∞';
  return '—á–∞—Å–æ–≤';
}

/**
 * –§—É–Ω–∫—Ü–∏—è allInfo - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É
 * –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /allinfo
 */
export async function allInfo(): Promise<Response> {
  const now = new Date();
  const startTime = Date.now();
  
  console.log(`\n=== ALL INFO STARTED ===`);
  console.log(`üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${now.toISOString()}`);
  console.log(`üë§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É: ${OWNER_TELEGRAM_ID}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  console.log(`üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î...`);
  const usersRes = await supabase
    .from("users")
    .select("*");
    
  if (usersRes.error) {
    console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", usersRes.error);
    return new Response(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersRes.error.message}`, { status: 500 });
  }
  
  const users = usersRes.data || [];
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
  
  // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∫ –≤ dailyCron
  const stats = {
    totalActive: 0,
    postsToday: 0,
    noPosts: 0,
    newStrikes: [] as Array<{username: string, strikes: number}>,
    riskyUsers: [] as Array<{username: string, strikes: number}>,
    autoPaused: [] as Array<{username: string}>,
    pauseCompleted: [] as Array<{username: string}>,
    pauseExpiredRemoved: [] as Array<{username: string}>,
    currentlyPaused: [] as Array<{username: string, pauseUntil: string}>,
    subscriptionWarnings: [] as Array<{username: string, daysLeft: number}>,
    subscriptionRemoved: [] as Array<{username: string}>,
    dangerousCases: [] as Array<{username: string, reason: string}>
  };

  console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  for (const user of users) {
    const username = user.username || String(user.telegram_id);
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if (user.in_chat && user.is_active) {
      stats.totalActive++;
      
      if (user.post_today) {
        stats.postsToday++;
      } else {
        stats.noPosts++;
      }
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–∏—Å–∫–æ–º
    if (user.strikes_count === 3 && user.is_active) {
      stats.riskyUsers.push({username, strikes: user.strikes_count});
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –ø–∞—É–∑–µ
    if (user.pause_until && new Date(user.pause_until) > now) {
      const pauseEnd = new Date(user.pause_until);
      stats.currentlyPaused.push({
        username,
        pauseUntil: pauseEnd.toLocaleDateString('ru-RU')
      });
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
    if (user.subscription_days_left <= 3 && user.subscription_days_left > 0) {
      stats.subscriptionWarnings.push({username, daysLeft: user.subscription_days_left});
    }
    
    // –û–ø–∞—Å–Ω—ã–µ —Å–ª—É—á–∞–∏
    if (user.strikes_count === 3 && user.is_active) {
      stats.dangerousCases.push({
        username,
        reason: "3 —Å—Ç—Ä–∞–π–∫–∞ - –Ω–∞ –≥—Ä–∞–Ω–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
      });
    }
    
    if (user.subscription_days_left <= 3 && user.subscription_days_left > 0 && user.strikes_count > 0) {
      stats.dangerousCases.push({
        username,
        reason: `–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${user.subscription_days_left} –¥–Ω. + ${user.strikes_count} —Å—Ç—Ä–∞–π–∫(–∞)`
      });
    }
    
    if (user.in_chat && !user.is_active && user.created_at) {
      const createdDate = new Date(user.created_at);
      const daysSinceCreated = Math.floor((now.getTime() - createdDate.getTime()) / (24 * 60 * 60 * 1000));
      if (daysSinceCreated <= 7) {
        stats.dangerousCases.push({
          username,
          reason: `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (${daysSinceCreated} –¥–Ω.)`
        });
      }
    }
    
    if (user.is_active && user.expires_at && new Date(user.expires_at) <= now && user.subscription_days_left === 0) {
      stats.dangerousCases.push({
        username,
        reason: "–ê–∫—Ç–∏–≤–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
      });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É...`);
  try {
    const report = MSG_DAILY_CRON_REPORT(stats);
    await sendDirectMessage(OWNER_TELEGRAM_ID, report);
    console.log(`‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:`, err);
  }

  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const endTime = Date.now();
  const executionTime = endTime - startTime;
  
  console.log(`\n=== ALL INFO COMPLETED ===`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`);
  console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalActive}`);
  console.log(`   - –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å—Ç—ã: ${stats.postsToday}`);
  console.log(`   - –ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: ${stats.noPosts}`);
  console.log(`   - –ù–∞ –ø–∞—É–∑–µ: ${stats.currentlyPaused.length}`);
  console.log(`   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–µ: ${stats.subscriptionWarnings.length}`);
  console.log(`   - –û–ø–∞—Å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: ${stats.dangerousCases.length}`);
  console.log(`üèÅ allInfo –∑–∞–≤–µ—Ä—à–µ–Ω –≤ ${new Date().toISOString()}`);

  return new Response(JSON.stringify({
    message: "allInfo –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
    executionTime,
    stats
  }), { status: 200, headers: { "Content-Type": "application/json" } });
} 