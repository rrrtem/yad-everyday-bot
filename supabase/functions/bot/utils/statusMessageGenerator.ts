import { pluralizeDays, CHALLENGE_JOIN_LINK } from '../constants.ts';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
interface UserStatusData {
  is_in_chat?: boolean;
  in_chat?: boolean;
  subscription_days_left: number;
  subscription_active: boolean;
  expires_at?: string;
  mode?: 'text';
  pace?: 'daily' | 'weekly';
  units_count?: number;
  strikes_count?: number;
  consecutive_posts_count?: number;
  last_post_date?: string;
  public_remind?: boolean;
  pause_until?: string;
}

/**
 * –¢–∏–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
 */
enum SubscriptionStatus {
  NOT_IN_CHAT = 'not_in_chat',
  USING_SAVED_DAYS = 'using_saved_days',
  ACTIVE_SUBSCRIPTION = 'active_subscription',
  MIXED_STATUS = 'mixed_status',
  UNCLEAR_STATUS = 'unclear_status'
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function determineSubscriptionStatus(user: UserStatusData): SubscriptionStatus {
  const isInChat = user.is_in_chat !== false && user.in_chat !== false;
  
  if (!isInChat) {
    return SubscriptionStatus.NOT_IN_CHAT;
  }
  
  if (user.subscription_days_left > 0 && !user.subscription_active) {
    return SubscriptionStatus.USING_SAVED_DAYS;
  }
  
  if (user.subscription_active && user.subscription_days_left === 0) {
    return SubscriptionStatus.ACTIVE_SUBSCRIPTION;
  }
  
  if (user.subscription_active && user.subscription_days_left > 0) {
    return SubscriptionStatus.MIXED_STATUS;
  }
  
  return SubscriptionStatus.UNCLEAR_STATUS;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
 */
function formatSubscriptionInfo(user: UserStatusData, status: SubscriptionStatus): string {
  const now = new Date();
  
  switch (status) {
    case SubscriptionStatus.NOT_IN_CHAT:
      return formatNotInChatStatus(user, now);
      
    case SubscriptionStatus.USING_SAVED_DAYS:
      return formatSavedDaysStatus(user, now);
      
    case SubscriptionStatus.ACTIVE_SUBSCRIPTION:
      return formatActiveSubscriptionStatus(user, now);
      
    case SubscriptionStatus.MIXED_STATUS:
      return formatMixedStatus(user, now);
      
    case SubscriptionStatus.UNCLEAR_STATUS:
    default:
      return formatUnclearStatus(user);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ
 */
function formatNotInChatStatus(user: UserStatusData, now: Date): string {
  let message = `‚ùå –¢—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —á–∞—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
  
  if (user.subscription_days_left > 0) {
    const savedDaysEndDate = new Date(now);
    savedDaysEndDate.setDate(savedDaysEndDate.getDate() + user.subscription_days_left);
    message += `‚Ä¢ –£ —Ç–µ–±—è –µ—Å—Ç—å ${user.subscription_days_left} ${pluralizeDays(user.subscription_days_left)} —Å –ø—Ä–æ—à–ª–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n`;
    message += `‚Ä¢ –î–µ–π—Å—Ç–≤—É—é—Ç –¥–æ: ${savedDaysEndDate.toLocaleDateString('ru-RU')}\n`;
  } else {
    message += `‚Ä¢ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ—Ç\n`;
  }
  
  return message + `\n`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–Ω–∏
 */
function formatSavedDaysStatus(user: UserStatusData, now: Date): string {
  const savedDaysEndDate = new Date(now);
  savedDaysEndDate.setDate(savedDaysEndDate.getDate() + user.subscription_days_left);
  
  return `üí∞ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–Ω–∏ —Å –ø—Ä–æ—à–ª–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${user.subscription_days_left}
‚Ä¢ –î–µ–π—Å—Ç–≤—É—é—Ç –¥–æ: ${savedDaysEndDate.toLocaleDateString('ru-RU')}
‚Ä¢ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤ Tribute –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞

`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
 */
function formatActiveSubscriptionStatus(user: UserStatusData, now: Date): string {
  let message = `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n\n`;
  
  if (user.expires_at) {
    const expiresDate = new Date(user.expires_at);
    const daysLeft = Math.ceil((expiresDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
    message += `‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresDate.toLocaleDateString('ru-RU')}\n`;
    message += `‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${Math.max(0, daysLeft)}\n`;
  }
  
  return message + `\n`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ + —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–Ω–∏)
 */
function formatMixedStatus(user: UserStatusData, now: Date): string {
  let message = `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ + –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–Ω–∏\n\n`;
  
  if (user.expires_at) {
    const expiresDate = new Date(user.expires_at);
    const daysLeft = Math.ceil((expiresDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: ${expiresDate.toLocaleDateString('ru-RU')} (${Math.max(0, daysLeft)} –¥–Ω–µ–π)\n`;
  }
  
  message += `‚Ä¢ –ü–ª—é—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–Ω–∏: ${user.subscription_days_left} ${pluralizeDays(user.subscription_days_left)}\n`;
  
  return message + `\n`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
 */
function formatUnclearStatus(user: UserStatusData): string {
  return `‚ùì –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω\n\n
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${user.subscription_active ? '–¥–∞' : '–Ω–µ—Ç'}
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–Ω–µ–π: ${user.subscription_days_left || 0}
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å

`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ –∏ —Ä–∏—Ç–º–µ —É—á–∞—Å—Ç–∏—è
 */
function formatParticipationInfo(user: UserStatusData): string {
  const mode = user.mode === 'text' ? '–¢–µ–∫—Å—Ç—ã' : '‚ùì –ù–µ –≤—ã–±—Ä–∞–Ω';
  const pace = user.pace === 'daily' ? '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å' : user.pace === 'weekly' ? '–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é' : '‚ùì –ù–µ –≤—ã–±—Ä–∞–Ω';
  
  return `üìù **–†–µ–∂–∏–º:** ${mode}\n‚è∞ **–†–∏—Ç–º:** ${pace}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å—Ç—ã)
 */
function formatActivityStats(user: UserStatusData): string {
  if (!user.units_count || user.units_count === 0) {
    return '';
  }
  
  let message = `‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${user.units_count}\n`;
  message += `‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ–¥—Ä—è–¥: ${user.strikes_count || 0}\n`;
  message += `‚Ä¢ –î–Ω–µ–π –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤: ${user.consecutive_posts_count || 0}\n\n`;
  message += `\n`;
  message += `–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: ${CHALLENGE_JOIN_LINK}`;

  return message + `\n`;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param user - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
 */
export function generateUserStatusMessage(user: UserStatusData): string {
  let statusMessage = `–í—Å–µ –≤–∞–∂–Ω–æ–µ –ø—Ä–æ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ\n\n`;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
  const subscriptionStatus = determineSubscriptionStatus(user);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
  statusMessage += formatSubscriptionInfo(user, subscriptionStatus);
  statusMessage += `\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ –∏ —Ä–∏—Ç–º–µ
  statusMessage += formatParticipationInfo(user);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const activityStats = formatActivityStats(user);
  if (activityStats) {
    statusMessage += activityStats;
  }
  
  return statusMessage;
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
 */
export type { UserStatusData };
export { SubscriptionStatus };

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param user - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 * @returns –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram API
 */
export async function generateStatusKeyboard(user: UserStatusData): Promise<any> {
  const { 
    TRIBUTE_BOT_LINK, 
    ADMIN_CONTACT,
    CALLBACK_TOGGLE_PUBLIC_REMINDER
  } = await import('../constants.ts');

  const keyboard: any[] = [];

  // –†—è–¥ 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π (–ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞)
  keyboard.push([
    { text: "üëÄ –ü–æ–¥–ø–∏—Å–∫–∞", url: TRIBUTE_BOT_LINK }
  ]);

  // –†—è–¥ 2: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞)
  keyboard.push([
    { text: "ü¶â –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url: `https://t.me/${ADMIN_CONTACT.replace('@', '')}` }
  ]);

  // –¢–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  if (isUserActive(user)) {
    // –†—è–¥ 3: –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º (–ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞)
    keyboard.push([
      { text: "üåó–†–µ–∂–∏–º", callback_data: "change_mode" }
    ]);
    
    // –†—è–¥ 4: –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∏—Ç–º (–ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞)  
    keyboard.push([
      { text: "üí® –†–∏—Ç–º", callback_data: "change_pace" }
    ]);
    
    // –†—è–¥ 5: –ö–∞–Ω–∏–∫—É–ª—ã (–ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞)
    keyboard.push([
      { text: "üò¥ –ö–∞–Ω–∏–∫—É–ª—ã", callback_data: "pause" }
    ]);
    
    // –†—è–¥ 6: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞) - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç
    const reminderButtonText = user.public_remind !== false 
      ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" 
      : "üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è";
    
    keyboard.push([
      { text: reminderButtonText, callback_data: CALLBACK_TOGGLE_PUBLIC_REMINDER }
    ]);
  }

  return { inline_keyboard: keyboard };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–º–æ–∂–µ—Ç –ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)
 */
function isUserActive(user: UserStatusData): boolean {
  const isInChat = user.is_in_chat !== false && user.in_chat !== false;
  const hasSubscription = user.subscription_active || user.subscription_days_left > 0;
  return isInChat && hasSubscription;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ø–∞—É–∑–µ
 */
function isUserOnPause(user: UserStatusData): boolean {
  if (!user.pause_until) return false;
  const pauseEnd = new Date(user.pause_until);
  return pauseEnd > new Date();
} 