import { sendDirectMessage, findUserByTelegramId } from "../../userHandler.ts";
import { SetupProcess } from "./SetupProcess.ts";
import { SlotManager } from "../flows/SlotManager.ts";
import { 
  MSG_DIRECT_CHAT_LINK,
  MSG_LINK_CLUB,
  MSG_LINK_STANDARD,
  SPECIAL_PAYMENT_URL,
  DEFAULT_PAYMENT_URL
} from "../../../constants.ts";

const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª—É–±–∞
 */
export class PaymentHandler {
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–ª—É–±–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
   */
  static async checkStatusAndSendPayment(telegramId: number): Promise<void> {
    try {
      const user = await findUserByTelegramId(telegramId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      if (await this.hasUnusedSubscriptionDays(user)) {
        const daysLeft = user.subscription_days_left || 0;
        await sendDirectMessage(telegramId, MSG_DIRECT_CHAT_LINK(daysLeft));
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω
        await this.clearUserState(telegramId);
        return;
      }
      
      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—É–±–∞
      if (user.club === true) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–ª—É–±–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        await sendDirectMessage(telegramId, MSG_LINK_CLUB(SPECIAL_PAYMENT_URL));
        await this.recordPaymentLinkSent(telegramId);
      } else {
        // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø—Ä–æ–º–æ–∫–æ–¥
        await SetupProcess.sendPromoSelection(telegramId);
      }
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ PaymentHandler.checkStatusAndSendPayment:", error);
      await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å –∫–Ω–æ–ø–∫–æ–π "–£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
   */
  static async sendStandardPaymentLink(telegramId: number): Promise<void> {
    try {
      const keyboard = {
        inline_keyboard: [
          [{ text: "üé´ –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data: "have_promo" }]
        ]
      };
      
      await fetch(`${TELEGRAM_API}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: telegramId,
          text: MSG_LINK_STANDARD(DEFAULT_PAYMENT_URL),
          parse_mode: "HTML",
          reply_markup: keyboard
        })
      });
      
      await this.recordPaymentLinkSent(telegramId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ PaymentHandler.sendStandardPaymentLink:", error);
      await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª—É–±–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
   */
  static async sendClubPaymentLink(telegramId: number): Promise<void> {
    try {
      await sendDirectMessage(telegramId, MSG_LINK_CLUB(SPECIAL_PAYMENT_URL));
      await this.recordPaymentLinkSent(telegramId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ PaymentHandler.sendClubPaymentLink:", error);
      await sendDirectMessage(telegramId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  private static async hasUnusedSubscriptionDays(user: any): Promise<boolean> {
    if (!user.subscription_days_left) return false;
    return user.subscription_days_left > 0;
  }
  
  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
   */
  private static async recordPaymentLinkSent(telegramId: number): Promise<void> {
    const { createClient } = await import("https://esm.sh/@supabase/supabase-js@2");
    const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
    const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
    const supabase = createClient(SUPABASE_URL!, SUPABASE_KEY!);
    
    const now = new Date().toISOString();
    await supabase
      .from("users")
      .update({
        payment_link_sent: now,
        user_state: "payment_link_sent",
        updated_at: now
      })
      .eq("telegram_id", telegramId);
      
    // –£–ë–ò–†–ê–ï–ú —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –æ—Ç—Å—é–¥–∞ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å 
    // –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ö–æ–¥–µ –≤ —á–∞—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    // await SlotManager.decreaseAvailableSlots();
  }
  
  /**
   * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static async clearUserState(telegramId: number): Promise<void> {
    const { createClient } = await import("https://esm.sh/@supabase/supabase-js@2");
    const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
    const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
    const supabase = createClient(SUPABASE_URL!, SUPABASE_KEY!);
    
    const now = new Date().toISOString();
    await supabase
      .from("users")
      .update({
        user_state: null,
        updated_at: now
      })
      .eq("telegram_id", telegramId);
  }
} 