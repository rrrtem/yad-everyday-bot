import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import {
  WEBHOOK_DEDUPLICATION_HOURS,
  MSG_SUBSCRIPTION_RENEWED,
  MSG_SUBSCRIPTION_RENEWED_WITH_BONUS,
  MSG_SUBSCRIPTION_CANCELLED,
  MSG_TRIBUTE_WEBHOOK_ERROR,
  MSG_TRIBUTE_SIGNATURE_ERROR,
  MSG_SYNC_NO_ACTIVE_USERS,
  MSG_SYNC_COMPLETE,
  MSG_SUBSCRIPTION_EXPIRED_NOTIFICATION,
  OWNER_TELEGRAM_ID,
  pluralizeDays
} from "../constants.ts";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const SUPABASE_URL = Deno.env.get("SUPABASE_URL")!;
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

// Telegram API
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN")!;
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// Tribute API –∫–ª—é—á
const TRIBUTE_API_KEY = Deno.env.get("TRIBUTE_API_KEY")!;

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Tribute API webhook'–æ–≤
 */
interface TributeNewSubscriptionPayload {
  subscription_name: string;
  subscription_id: number;
  period_id: number;
  period: string;
  price: number;
  amount: number;
  currency: string;
  user_id: number;
  telegram_user_id: number;
  channel_id: number;
  channel_name: string;
  expires_at: string;
}

interface TributeCancelledSubscriptionPayload extends TributeNewSubscriptionPayload {
  cancel_reason: string;
}

interface TributeWebhookEvent {
  created_at: string;
  name: "new_subscription" | "cancelled_subscription";
  payload: TributeNewSubscriptionPayload | TributeCancelledSubscriptionPayload;
  sent_at: string;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook'–∞ –æ—Ç Tribute
 */
async function verifyTributeSignature(body: string, signature: string): Promise<boolean> {
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à API –∫–ª—é—á
    const encoder = new TextEncoder();
    const key = await crypto.subtle.importKey(
      "raw",
      encoder.encode(TRIBUTE_API_KEY),
      { name: "HMAC", hash: "SHA-256" },
      false,
      ["sign"]
    );
    
    const computedSignature = await crypto.subtle.sign("HMAC", key, encoder.encode(body));
    const computedSignatureHex = Array.from(new Uint8Array(computedSignature))
      .map(b => b.toString(16).padStart(2, '0'))
      .join('');
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
    return computedSignatureHex === signature;
  } catch (error) {
    console.error("Error verifying Tribute signature:", error);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
async function sendTelegramMessage(telegramId: number, text: string): Promise<void> {
  try {
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: telegramId,
        text: text,
        parse_mode: "HTML"
      })
    });

    const result = await response.json();
    if (!result.ok) {
      console.error("Failed to send Telegram message:", result);
    }
  } catch (error) {
    console.error("Error sending Telegram message:", error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
 */
async function notifyAdmin(message: string): Promise<void> {
  await sendTelegramMessage(OWNER_TELEGRAM_ID, message);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ webhook'–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
 */
async function isWebhookAlreadyProcessed(telegramUserId: number, isTestWebhook: boolean = false): Promise<boolean> {
  // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö webhook'–æ–≤ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
  if (isTestWebhook) {
    console.log("üß™ Test webhook - skipping deduplication");
    return false;
  }

  // –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö webhook'–æ–≤ ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ç–∏–≤ —Å–ø–∞–º–∞ (5 –º–∏–Ω—É—Ç)
  const minutesAgo = new Date();
  minutesAgo.setMinutes(minutesAgo.getMinutes() - 5);

  const { data } = await supabase
    .from("users")
    .select("tribute_webhook_processed_at")
    .eq("telegram_id", telegramUserId);

  if (!data || data.length === 0 || !data[0]?.tribute_webhook_processed_at) {
    return false;
  }

  const lastProcessed = new Date(data[0].tribute_webhook_processed_at);
  const isRecent = lastProcessed > minutesAgo;
  
  if (isRecent) {
    console.log(`‚è∞ Recent webhook for user ${telegramUserId} processed at ${lastProcessed.toISOString()}, current deduplication window: 5 minutes`);
  }
  
  return isRecent;
}

/**
 * –ë6. –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–∞ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç Tribute API
 */
export async function handleNewSubscription(payload: TributeNewSubscriptionPayload, isTestWebhook: boolean = false): Promise<Response> {
  console.log("Processing new subscription webhook:", payload);

  const { telegram_user_id } = payload;

  try {
    // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
    if (await isWebhookAlreadyProcessed(telegram_user_id, isTestWebhook)) {
      console.log(`Webhook already processed for user ${telegram_user_id}, ignoring`);
      return new Response(JSON.stringify({ ok: true, message: "Already processed" }), {
        status: 200,
        headers: { "Content-Type": "application/json" }
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    console.log(`üîç Looking for user with telegram_id: ${telegram_user_id} (type: ${typeof telegram_user_id})`);
    
    let { data: users, error: findError } = await supabase
      .from("users")
      .select("*")
      .eq("telegram_id", telegram_user_id);
    
    let user = null;
    if (users && users.length > 0) {
      user = users[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (users.length > 1) {
        console.log(`‚ö†Ô∏è WARNING: Found ${users.length} users with telegram_id ${telegram_user_id}, using first one`);
        await notifyAdmin(`‚ö†Ô∏è –î–£–ë–õ–ò–ö–ê–¢–´: –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegram_id ${telegram_user_id}! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π.`);
      }
    }

    console.log(`üìä Database query result:`, { 
      userFound: user ? `Found user ${user.telegram_id}` : 'No user found', 
      error: findError,
      errorCode: findError?.code,
      errorMessage: findError?.message
    });

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    if (findError || !user) {
      console.log(`üîÑ Trying alternative search with type conversion...`);
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∏ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const { data: userAlt, error: findErrorAlt } = await supabase
        .from("users")
        .select("*")
        .or(`telegram_id.eq.${telegram_user_id},telegram_id.eq."${telegram_user_id}"`)
        .single();
        
      console.log(`üîç Alternative search result:`, { 
        userFound: userAlt ? `Found user ${userAlt.telegram_id}` : 'No user found', 
        error: findErrorAlt
      });
      
      if (userAlt && !findErrorAlt) {
        user = userAlt;
        findError = null;
        console.log(`‚úÖ Found user with alternative search!`);
      }
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if (findError || !user) {
      console.log(`‚ùå User not found for telegram_id ${telegram_user_id}!`);
      console.log(`üîÑ Attempting to create new user...`);
      console.log(`Error details:`, findError);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
      await notifyAdmin(`üîç DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n\nTelegram ID: ${telegram_user_id}\n–¢–∏–ø: ${typeof telegram_user_id}\n–û—à–∏–±–∫–∞: ${findError?.message || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${findError?.code || 'N/A'}\n\n–°–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`);
      
      const now = new Date().toISOString();
      const { data: newUser, error: createError } = await supabase
        .from("users")
        .insert({
          telegram_id: telegram_user_id,
          in_chat: false,
          subscription_active: false,
          club: false,
          post_today: false,
          public_remind: true,
          strikes_count: 0,
          units_count: 0,
          subscription_days_left: 0,
          pause_days: 0,
          created_at: now
        })
        .select()
        .single();

      if (createError) {
        console.error("Error creating new user:", createError);
        await notifyAdmin(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegram_user_id}: ${createError.message}`);
        return new Response(JSON.stringify({ error: "Failed to create user" }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        });
      }

      user = newUser;
      console.log(`Successfully created new user for telegram_id ${telegram_user_id}`);
    } else {
      console.log(`‚úÖ Found existing user for telegram_id ${telegram_user_id}`);
    }

    const now = new Date().toISOString();
    const expiresAt = payload.expires_at;
    let bonusDays = 0;
    let finalExpiresAt = expiresAt;

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    if (user.subscription_days_left > 0) {
      bonusDays = user.subscription_days_left;
      const expiresDate = new Date(expiresAt);
      expiresDate.setDate(expiresDate.getDate() + bonusDays);
      finalExpiresAt = expiresDate.toISOString();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updateData: any = {
      // –î–∞–Ω–Ω—ã–µ –∏–∑ Tribute webhook
      subscription_id: payload.subscription_id,
      period_id: payload.period_id,
      period: payload.period,
      price: payload.price,
      amount: payload.amount,
      currency: payload.currency,
      subscription_name: payload.subscription_name,
      tribute_user_id: payload.user_id,
      channel_id: payload.channel_id,
      channel_name: payload.channel_name,
      expires_at: finalExpiresAt,
      
      // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
      subscription_started_at: now,
      subscription_cancelled_at: null,
      subscription_active: true,
      subscription_days_left: 0, // –î–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –±—ã–ª–æ
      tribute_webhook_processed_at: now,
      updated_at: now
    };

    const { error: updateError } = await supabase
      .from("users")
      .update(updateData)
      .eq("telegram_id", telegram_user_id);

    if (updateError) {
      console.error("Error updating user subscription:", updateError);
      await notifyAdmin(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegram_user_id}: ${updateError.message}`);
      return new Response(JSON.stringify({ error: "Database update failed" }), {
        status: 500,
        headers: { "Content-Type": "application/json" }
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (bonusDays > 0) {
      await sendTelegramMessage(telegram_user_id, MSG_SUBSCRIPTION_RENEWED_WITH_BONUS(bonusDays));
    } else {
      await sendTelegramMessage(telegram_user_id, MSG_SUBSCRIPTION_RENEWED);
    }

    console.log(`Successfully processed new subscription for user ${telegram_user_id}`);
    return new Response(JSON.stringify({ ok: true, message: "Subscription activated" }), {
      status: 200,
      headers: { "Content-Type": "application/json" }
    });

  } catch (error) {
    console.error("Error processing new subscription webhook:", error);
    await notifyAdmin(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${telegram_user_id}: ${error.message}`);
    return new Response(JSON.stringify({ error: "Internal server error" }), {
      status: 500,
      headers: { "Content-Type": "application/json" }
    });
  }
}

/**
 * –ë7. –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç Tribute API
 */
export async function handleCancelledSubscription(payload: TributeCancelledSubscriptionPayload, isTestWebhook: boolean = false): Promise<Response> {
  console.log("Processing cancelled subscription webhook:", payload);

  const { telegram_user_id } = payload;

  try {
    // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
    if (await isWebhookAlreadyProcessed(telegram_user_id, isTestWebhook)) {
      console.log(`Webhook already processed for user ${telegram_user_id}, ignoring`);
      return new Response(JSON.stringify({ ok: true, message: "Already processed" }), {
        status: 200,
        headers: { "Content-Type": "application/json" }
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    let { data: users, error: findError } = await supabase
      .from("users")
      .select("*")
      .eq("telegram_id", telegram_user_id);
    
    let user = null;
    if (users && users.length > 0) {
      user = users[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (users.length > 1) {
        console.log(`‚ö†Ô∏è WARNING: Found ${users.length} users with telegram_id ${telegram_user_id}, using first one`);
        await notifyAdmin(`‚ö†Ô∏è –î–£–ë–õ–ò–ö–ê–¢–´: –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegram_id ${telegram_user_id}! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π.`);
      }
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if (findError || !user) {
      console.log(`User not found for telegram_id ${telegram_user_id}, creating new user`);
      
      const now = new Date().toISOString();
      const { data: newUser, error: createError } = await supabase
        .from("users")
        .insert({
          telegram_id: telegram_user_id,
          in_chat: false,
          subscription_active: false,
          club: false,
          post_today: false,
          public_remind: true,
          strikes_count: 0,
          units_count: 0,
          subscription_days_left: 0,
          pause_days: 0,
          created_at: now
        })
        .select()
        .single();

      if (createError) {
        console.error("Error creating new user:", createError);
        await notifyAdmin(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegram_user_id}: ${createError.message}`);
        return new Response(JSON.stringify({ error: "Failed to create user" }), {
          status: 500,
          headers: { "Content-Type": "application/json" }
        });
      }

      user = newUser;
      console.log(`Successfully created new user for telegram_id ${telegram_user_id}`);
    }

    const now = new Date().toISOString();
    const expiresAt = new Date(payload.expires_at);
    const currentDate = new Date();

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏
    let subscriptionDaysLeft = 0;
    if (expiresAt > currentDate) {
      const timeDiff = expiresAt.getTime() - currentDate.getTime();
      subscriptionDaysLeft = Math.ceil(timeDiff / (1000 * 3600 * 24));
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Å—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã–º
    const remainsActive = user.in_chat && subscriptionDaysLeft > 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updateData: any = {
      subscription_cancelled_at: now,
      cancel_reason: payload.cancel_reason || "",
      expires_at: payload.expires_at,
      subscription_active: false,
      subscription_days_left: subscriptionDaysLeft,
      tribute_webhook_processed_at: now,
      updated_at: now
    };

    const { error: updateError } = await supabase
      .from("users")
      .update(updateData)
      .eq("telegram_id", telegram_user_id);

    if (updateError) {
      console.error("Error updating user subscription cancellation:", updateError);
      await notifyAdmin(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegram_user_id}: ${updateError.message}`);
      return new Response(JSON.stringify({ error: "Database update failed" }), {
        status: 500,
        headers: { "Content-Type": "application/json" }
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–Ω –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω –≤ —á–∞—Ç–µ
    if (user.in_chat) {
      const expiresAtFormatted = expiresAt.toLocaleDateString('ru-RU');
      await sendTelegramMessage(telegram_user_id, MSG_SUBSCRIPTION_CANCELLED(expiresAtFormatted, subscriptionDaysLeft));
    }

    console.log(`Successfully processed cancelled subscription for user ${telegram_user_id}`);
    return new Response(JSON.stringify({ ok: true, message: "Subscription cancelled" }), {
      status: 200,
      headers: { "Content-Type": "application/json" }
    });

  } catch (error) {
    console.error("Error processing cancelled subscription webhook:", error);
    await notifyAdmin(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${telegram_user_id}: ${error.message}`);
    return new Response(JSON.stringify({ error: "Internal server error" }), {
      status: 500,
      headers: { "Content-Type": "application/json" }
    });
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
 */
export async function syncSubscriptionsCommand(): Promise<string> {
  try {
    console.log("=== SYNC SUBSCRIPTIONS COMMAND ===");

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ (–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  const { data: users, error: fetchError } = await supabase
    .from("users")
    .select("*")
    .eq("in_chat", true);

    if (fetchError) {
      console.error("Error fetching active subscribers:", fetchError);
      return `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${fetchError.message}`;
    }

    if (!users || users.length === 0) {
      return MSG_SYNC_NO_ACTIVE_USERS;
    }

    let syncedCount = 0;
    let expiredCount = 0;
    let restoredCount = 0;
    const now = new Date();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of users) {
      if (user.expires_at) {
        const expiresAt = new Date(user.expires_at);
        
        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if (expiresAt <= now) {
          const daysLeft = Math.max(0, user.subscription_days_left || 0);
          
          const { error: updateError } = await supabase
            .from("users")
            .update({
              subscription_active: false, // –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –º–æ–∂–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å subscription_active
              updated_at: now.toISOString()
            })
            .eq("id", user.id);

          if (updateError) {
            console.error(`Error updating expired user ${user.telegram_id}:`, updateError);
          } else {
            expiredCount++;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            if (user.in_chat) {
              const expiresAtFormatted = expiresAt.toLocaleDateString('ru-RU');
              await sendTelegramMessage(
                user.telegram_id, 
                MSG_SUBSCRIPTION_EXPIRED_NOTIFICATION(expiresAtFormatted, daysLeft)
              );
            }
          }
        } else {
          // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç, –Ω–æ subscription_active = false, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
          if (!user.subscription_active && user.subscription_id) {
            const { error: updateError } = await supabase
              .from("users")
              .update({
                subscription_active: true, // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
                updated_at: now.toISOString()
              })
              .eq("id", user.id);
              
            if (updateError) {
              console.error(`Error restoring user ${user.telegram_id}:`, updateError);
            } else {
              restoredCount++;
              console.log(`Restored subscription_active for user ${user.telegram_id} with valid expires_at`);
            }
          }
        }
      }
      
      syncedCount++;
    }

    const resultMessage = MSG_SYNC_COMPLETE(syncedCount, expiredCount, restoredCount);
    await notifyAdmin(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\nüìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${syncedCount}\n‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö: ${expiredCount}\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${restoredCount}`);
    
    return resultMessage;

  } catch (error) {
    console.error("Error in sync subscriptions command:", error);
    await notifyAdmin(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: ${error.message}`);
    return `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Tribute webhook'–æ–≤
 */
export async function handleTributeWebhook(req: Request): Promise<Response> {
  try {
    console.log("=== TRIBUTE WEBHOOK RECEIVED ===");
    console.log("Timestamp:", new Date().toISOString());
    console.log("Method:", req.method);
    console.log("URL:", req.url);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = Object.fromEntries(req.headers.entries());
    console.log("Headers:", JSON.stringify(headers, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    if (req.method !== "POST") {
      console.log("‚ùå Invalid method:", req.method);
      return new Response("Method Not Allowed", { status: 405 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–º webhook'–æ–º
    const isTestWebhook = req.headers.get("X-Test-Webhook") === "true";
    console.log("Is test webhook:", isTestWebhook);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const signature = req.headers.get("trbt-signature");
    console.log("Signature from header:", signature);
    
    if (!signature && !isTestWebhook) {
      console.error("‚ùå Missing trbt-signature header");
      console.log("Available headers:", Object.keys(headers));
      await notifyAdmin(MSG_TRIBUTE_SIGNATURE_ERROR + "\n–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ trbt-signature\nHeaders: " + JSON.stringify(headers));
      return new Response("Missing signature", { status: 401 });
    }

    // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const body = await req.text();
    console.log("Raw body length:", body.length);
    console.log("Raw body content:", body);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö webhook'–æ–≤)
    if (!isTestWebhook) {
      console.log("üîê Verifying signature...");
      const isValidSignature = await verifyTributeSignature(body, signature);
      console.log("Signature valid:", isValidSignature);
      
      if (!isValidSignature) {
        console.error("‚ùå Invalid Tribute webhook signature");
        console.log("Expected signature calculation with TRIBUTE_API_KEY");
        await notifyAdmin(MSG_TRIBUTE_SIGNATURE_ERROR + `\n–ü–æ–¥–ø–∏—Å—å: ${signature}\n–¢–µ–ª–æ: ${body.substring(0, 500)}...`);
        return new Response(JSON.stringify({ 
          error: "Invalid signature",
          signature_received: signature.substring(0, 10) + "...",
          body_preview: body.substring(0, 100) + "..."
        }), { 
          status: 401,
          headers: { "Content-Type": "application/json" }
        });
      }
      
      console.log("‚úÖ Signature verification passed");
    } else {
      console.log("üß™ Test webhook - skipping signature verification");
    }

    // –ü–∞—Ä—Å–∏–º JSON
    console.log("üìÑ Parsing JSON body...");
    let webhookData: any;
    try {
      webhookData = JSON.parse(body);
      console.log("‚úÖ JSON parsed successfully");
      console.log("Webhook data keys:", Object.keys(webhookData));
      console.log("Full webhook data:", JSON.stringify(webhookData, null, 2));
    } catch (error) {
      console.error("‚ùå Invalid JSON in webhook body:", error);
      console.error("Raw body that failed to parse:", body);
      await notifyAdmin(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ Tribute webhook:\n${error.message}\n–¢–µ–ª–æ: ${body.substring(0, 500)}...`);
      return new Response("Invalid JSON", { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–º webhook'–æ–º
    if (webhookData.test_event) {
      console.log("üß™ Test webhook detected:", webhookData.test_event);
      await notifyAdmin(`üß™ –ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π webhook –æ—Ç Tribute: ${webhookData.test_event}`);
      return new Response(JSON.stringify({ 
        ok: true, 
        message: "Test webhook received successfully",
        test_event: webhookData.test_event 
      }), {
        status: 200,
        headers: { "Content-Type": "application/json" }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ webhook'–∞
    console.log("üîç Checking webhook structure...");
    const webhookEvent = webhookData as TributeWebhookEvent;
    
    if (!webhookEvent.name || !webhookEvent.payload) {
      console.error("‚ùå Invalid webhook structure - missing name or payload");
      console.log("Expected: {name: string, payload: object}");
      console.log("Received keys:", Object.keys(webhookData));
      console.log("Received data:", JSON.stringify(webhookData, null, 2));
      
      await notifyAdmin(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Tribute webhook\n–û–∂–∏–¥–∞–ª–æ—Å—å: {name, payload}\n–ü–æ–ª—É—á–µ–Ω–æ: ${Object.keys(webhookData).join(', ')}\n–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(webhookData, null, 2).substring(0, 500)}...`);
      
      return new Response(JSON.stringify({ 
        error: "Invalid webhook structure",
        expected: ["name", "payload"],
        received: Object.keys(webhookData),
        data: webhookData
      }), {
        status: 400,
        headers: { "Content-Type": "application/json" }
      });
    }

    console.log("‚úÖ Webhook structure is valid");
    console.log("üéØ Real webhook event:", webhookEvent.name);
    console.log("üì¶ Event payload:", JSON.stringify(webhookEvent.payload, null, 2));
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ webhook'–µ
    if (isTestWebhook) {
      await notifyAdmin(`üß™ –ü–æ–ª—É—á–µ–Ω –¢–ï–°–¢–û–í–´–ô Tribute webhook!\n–¢–∏–ø: ${webhookEvent.name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${webhookEvent.payload.telegram_user_id}\n–í—Ä–µ–º—è: ${webhookEvent.created_at || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    } else {
      await notifyAdmin(`üéØ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π Tribute webhook!\n–¢–∏–ø: ${webhookEvent.name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${webhookEvent.payload.telegram_user_id}\n–í—Ä–µ–º—è: ${webhookEvent.created_at || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    console.log("üöÄ Processing webhook event...");
    switch (webhookEvent.name) {
      case "new_subscription":
        console.log("üîÑ Processing new_subscription event");
        return await handleNewSubscription(webhookEvent.payload as TributeNewSubscriptionPayload, isTestWebhook);
      
      case "cancelled_subscription":
        console.log("üîÑ Processing cancelled_subscription event");
        return await handleCancelledSubscription(webhookEvent.payload as TributeCancelledSubscriptionPayload, isTestWebhook);
      
      default:
        console.log(`‚ùì Unknown webhook event type: ${webhookEvent.name}`);
        await notifyAdmin(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø Tribute webhook: ${webhookEvent.name}\n–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(webhookEvent, null, 2)}`);
        return new Response(JSON.stringify({ 
          ok: true, 
          message: "Event type not handled",
          event_type: webhookEvent.name,
          available_types: ["new_subscription", "cancelled_subscription"]
        }), {
          status: 200,
          headers: { "Content-Type": "application/json" }
        });
    }

  } catch (error) {
    console.error("Critical error in Tribute webhook handler:", error);
    await notifyAdmin(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Tribute webhook: ${error.message}`);
    return new Response(JSON.stringify({ error: "Internal server error" }), {
      status: 500,
      headers: { "Content-Type": "application/json" }
    });
  }
} 