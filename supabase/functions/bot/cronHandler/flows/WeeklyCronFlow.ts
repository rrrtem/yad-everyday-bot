import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { ReportGenerator } from "../helpers/ReportGenerator.ts";
import { AdminReporter } from "../helpers/AdminReporter.ts";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

if (!SUPABASE_URL || !SUPABASE_KEY) {
  throw new Error("Missing Supabase environment variables for WeeklyCronFlow.");
}

interface WeeklyStats {
  totalWeeklyUsers: number;
  postsThisWeek: number;
  noPostsThisWeek: number;
  updatedUsers: Array<{username: string, unitsCount: number, consecutivePosts: number}>;
}

/**
 * –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (weeklyCron) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å pace=weekly
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è daily –ø—Ä–æ–≤–µ—Ä–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å—á–µ—Ç –ø–æ—Å—Ç–æ–≤
 */
export class WeeklyCronFlow {
  private supabase: SupabaseClient;

  constructor() {
    this.supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∫—Ä–æ–Ω–∞
   */
  async execute(): Promise<Response> {
    const now = new Date();
    const startTime = Date.now();
    
    console.log(`\n=== WEEKLY CRON STARTED ===`);
    console.log(`üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${now.toISOString()}`);
    console.log(`üåê UTC: ${now.getUTCHours()}:${now.getUTCMinutes()}:${now.getUTCSeconds()}`);
    console.log(`üìÖ –î–∞—Ç–∞: ${now.toDateString()}`);
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats: WeeklyStats = {
        totalWeeklyUsers: 0,
        postsThisWeek: 0,
        noPostsThisWeek: 0,
        updatedUsers: []
      };

      // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å weekly —Ä–∏—Ç–º–æ–º
      console.log(`üìä –ü–æ–ª—É—á–∞–µ–º weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î...`);
      const weeklyUsers = await this.getWeeklyUsers();
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${weeklyUsers.length} weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.processWeeklyUsers(weeklyUsers, now, stats);

      // 3. –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ post_today –¥–ª—è weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.resetWeeklyFlags();

      // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É
      await AdminReporter.sendWeeklyReport(stats);

      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      
      this.logFinalStats(stats, executionTime);

      return new Response(JSON.stringify({
        message: "weeklyCron –∑–∞–≤–µ—Ä—à—ë–Ω",
        executionTime,
        stats
      }), { status: 200, headers: { "Content-Type": "application/json" } });

    } catch (error) {
      console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ weeklyCron:", error);
      return new Response(`–û—à–∏–±–∫–∞ weeklyCron: ${error.message}`, { status: 500 });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  private async getWeeklyUsers(): Promise<any[]> {
    const { data: users, error } = await this.supabase
      .from("users")
      .select("*")
      .eq("pace", "weekly")
      .eq("in_chat", true);
      
    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
    }
    
    return users || [];
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private async processWeeklyUsers(users: any[], now: Date, stats: WeeklyStats): Promise<void> {
    console.log(`üîç –§–ê–ó–ê 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    for (const user of users) {
      const username = user.username || String(user.telegram_id);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã —á—Ç–æ –∏ –≤ daily
      if (!this.shouldProcessWeeklyUser(user, now)) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${username} (–Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä—ã)`);
        continue;
      }

      stats.totalWeeklyUsers++;
      
      if (user.post_today) {
        stats.postsThisWeek++;
        await this.updateUserWeeklyStats(user, now, stats);
        console.log(`‚úÖ ${username}: –∑–∞—Å—á–∏—Ç–∞–Ω weekly –ø–æ—Å—Ç`);
      } else {
        stats.noPostsThisWeek++;
        console.log(`‚ùå ${username}: –Ω–µ—Ç –ø–æ—Å—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é`);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ daily)
   */
  private shouldProcessWeeklyUser(user: any, now: Date): boolean {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—É–∑—É
    if (user.pause_until && new Date(user.pause_until) > now) {
      return false;
    }
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å daily
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ public_remind –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    
    return true;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ—Å—Ç–∞
   */
  private async updateUserWeeklyStats(user: any, now: Date, stats: WeeklyStats): Promise<void> {
    const newUnitsCount = (user.units_count || 0) + 1;
    const newConsecutivePosts = (user.consecutive_posts_count || 0) + 1;
    
    const updateData = {
      units_count: newUnitsCount,
      consecutive_posts_count: newConsecutivePosts,
      strikes_count: 0, // –°–±—Ä–æ—Å —Å—Ç—Ä–∞–π–∫–æ–≤ –ø—Ä–∏ weekly –ø–æ—Å—Ç–µ
      last_post_date: now.toISOString().split('T')[0], // YYYY-MM-DD
      updated_at: now.toISOString()
    };

    const { error } = await this.supabase
      .from("users")
      .update(updateData)
      .eq("telegram_id", user.telegram_id);
      
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è weekly —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${user.username || user.telegram_id}:`, error.message);
    } else {
      stats.updatedUsers.push({
        username: user.username || String(user.telegram_id),
        unitsCount: newUnitsCount,
        consecutivePosts: newConsecutivePosts
      });
    }
  }

  /**
   * –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ post_today –¥–ª—è weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private async resetWeeklyFlags(): Promise<void> {
    console.log(`üîç –§–ê–ó–ê 2: –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ post_today –¥–ª—è weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    const { error } = await this.supabase
      .from("users")
      .update({ post_today: false })
      .eq("pace", "weekly")
      .eq("post_today", true);
      
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ post_today –¥–ª—è weekly:`, error);
    } else {
      console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω—ã —Ñ–ª–∞–≥–∏ post_today –¥–ª—è weekly –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private logFinalStats(stats: WeeklyStats, executionTime: number): void {
    console.log(`‚úÖ Weekly cron completed: ${stats.totalWeeklyUsers} weekly users, ${stats.postsThisWeek} posted, updated ${stats.updatedUsers.length} users in ${executionTime}ms`);
  }
} 