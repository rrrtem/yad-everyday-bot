import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { ReportGenerator } from "../helpers/ReportGenerator.ts";
import { User } from "../helpers/UserProcessor.ts";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

if (!SUPABASE_URL || !SUPABASE_KEY) {
  throw new Error("Missing Supabase environment variables for PublicReminderFlow.");
}

/**
 * –ü—É–±–ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 20:00 UTC (publicDeadlineReminder)
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –ë3 –∏–∑ logic.md
 */
export class PublicReminderFlow {
  private supabase: SupabaseClient;

  constructor() {
    this.supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  async execute(): Promise<Response> {
    const now = new Date();
    const startTime = Date.now();
    
    console.log(`üîî Public reminder started at ${now.toISOString()}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å
      const users = await this.getUsersForReminder();
      console.log(`üìä Loaded ${users.length} user records`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const { sent: sentReminders, usernames: allUsernames } = await ReportGenerator.sendPublicReminders(users);

      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      
      console.log(`‚úÖ Public reminder completed: ${sentReminders} threads, ${allUsernames.length} users in ${executionTime}ms`);

      if (sentReminders === 0) {
        return new Response(JSON.stringify({ 
          message: "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
          executionTime 
        }), { status: 200 });
      }

      return new Response(JSON.stringify({ 
        message: "–ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", 
        usernames: allUsernames, 
        sentToThreads: sentReminders,
        executionTime
      }), { status: 200 });

    } catch (error) {
      console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ publicDeadlineReminder:", error);
      return new Response(`–û—à–∏–±–∫–∞ publicDeadlineReminder: ${error.message}`, { status: 500 });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  private async getUsersForReminder(): Promise<User[]> {
    const usersRes = await this.supabase
      .from("users")
      .select("username, mode, pace, in_chat, pause_until, public_remind, post_today");
      
    if (usersRes.error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersRes.error.message}`);
    }
    
    return usersRes.data || [];
  }


} 