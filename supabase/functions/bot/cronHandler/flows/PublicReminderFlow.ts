import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { ReportGenerator } from "../helpers/ReportGenerator.ts";
import { User } from "../helpers/UserProcessor.ts";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

if (!SUPABASE_URL || !SUPABASE_KEY) {
  throw new Error("Missing Supabase environment variables for PublicReminderFlow.");
}

/**
 * –ü—É–±–ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 20:00 UTC (publicDeadlineReminder)
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –ë3 –∏–∑ logic.md
 */
export class PublicReminderFlow {
  private supabase: SupabaseClient;

  constructor() {
    this.supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  async execute(): Promise<Response> {
    const now = new Date();
    const startTime = Date.now();
    
    console.log(`\n=== PUBLIC REMINDER STARTED ===`);
    console.log(`üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${now.toISOString()}`);
    console.log(`üåê UTC: ${now.getUTCHours()}:${now.getUTCMinutes()}:${now.getUTCSeconds()}`);
    
    try {
      // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
      const { diffHours, diffMinutes, timeLeftMsg } = ReportGenerator.calculateTimeUntilEndOfDay(now);
      console.log(`‚è∞ –î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è (04:00 UTC): ${diffHours}—á ${diffMinutes}–º–∏–Ω`);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å
      console.log(`üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î...`);
      const users = await this.getUsersForReminder();
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      this.logUserDiagnostics(users);
      
      console.log(`üí¨ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: "${timeLeftMsg}"`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const { sent: sentReminders, usernames: allUsernames } = await ReportGenerator.sendPublicReminders(users, timeLeftMsg);

      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      
      console.log(`\n=== PUBLIC REMINDER COMPLETED ===`);
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`);
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentReminders} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ ${sentReminders} —Ç—Ä–µ–¥–æ–≤`);
      console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö: ${allUsernames.length}`);
      console.log(`üèÅ Public reminder –∑–∞–≤–µ—Ä—à–µ–Ω –≤ ${new Date().toISOString()}`);

      if (sentReminders === 0) {
        console.log(`‚ÑπÔ∏è –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`);
        return new Response(JSON.stringify({ 
          message: "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç—ã –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
          executionTime 
        }), { status: 200 });
      }

      return new Response(JSON.stringify({ 
        message: "–ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", 
        usernames: allUsernames, 
        timeLeftMsg,
        sentToThreads: sentReminders,
        executionTime
      }), { status: 200 });

    } catch (error) {
      console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ publicDeadlineReminder:", error);
      return new Response(`–û—à–∏–±–∫–∞ publicDeadlineReminder: ${error.message}`, { status: 500 });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  private async getUsersForReminder(): Promise<User[]> {
    const usersRes = await this.supabase
      .from("users")
      .select("username, mode, pace, in_chat, pause_until, public_remind, post_today");
      
    if (usersRes.error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersRes.error.message}`);
    }
    
    return usersRes.data || [];
  }

  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private logUserDiagnostics(users: User[]): void {
    const activeDailyUsers = users.filter(u => u.in_chat && u.pace === "daily");
    console.log(`üîç –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å pace="daily": ${activeDailyUsers.length}`);
    
    if (activeDailyUsers.length > 0) {
      console.log(`   üìã –°–ø–∏—Å–æ–∫: ${activeDailyUsers.map(u => `${u.username}(${u.pace})`).join(', ')}`);
    }
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    console.log(`\nüîé –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:`);
    for (const user of activeDailyUsers.slice(0, 5)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
      console.log(`üë§ ${user.username}:`);
      console.log(`   - mode: "${user.mode}" (trimmed: "${user.mode?.trim()}")`);
      console.log(`   - post_today: ${user.post_today}`);
      console.log(`   - public_remind: ${user.public_remind}`);
      console.log(`   - pause_until: ${user.pause_until}`);
      console.log(`   - username: ${user.username ? '–µ—Å—Ç—å' : '–ù–ï–¢'}`);
    }
  }
} 