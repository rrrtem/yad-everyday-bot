import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { UserProcessor, ProcessingStats } from "../helpers/UserProcessor.ts";
import { ReportGenerator } from "../helpers/ReportGenerator.ts";
import { AdminReporter } from "../helpers/AdminReporter.ts";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

if (!SUPABASE_URL || !SUPABASE_KEY) {
  throw new Error("Missing Supabase environment variables for AllInfoFlow.");
}

/**
 * –§—É–Ω–∫—Ü–∏—è allInfo - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É
 * –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /allinfo
 */
export class AllInfoFlow {
  private supabase: SupabaseClient;
  private userProcessor: UserProcessor;

  constructor() {
    this.supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
    this.userProcessor = new UserProcessor(this.supabase);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  async execute(): Promise<Response> {
    const now = new Date();
    const startTime = Date.now();
    
    console.log(`‚ÑπÔ∏è AllInfo started at ${now.toISOString()}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const users = await this.userProcessor.getAllUsers();
      console.log(`üìä Loaded ${users.length} users for analysis`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = this.analyzeUsersStats(users, now);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É
      await AdminReporter.sendDailyCronReport(stats, 'allinfo', users);

      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      
      console.log(`‚úÖ AllInfo completed in ${executionTime}ms`);

      return new Response(JSON.stringify({
        message: "allInfo –∑–∞–≤–µ—Ä—à—ë–Ω",
        executionTime,
        stats
      }), { status: 200, headers: { "Content-Type": "application/json" } });

    } catch (error) {
      console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ allInfo:", error);
      return new Response(`–û—à–∏–±–∫–∞ allInfo: ${error.message}`, { status: 500 });
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  private analyzeUsersStats(users: any[], now: Date): ProcessingStats {
    const stats: ProcessingStats = {
      totalActive: 0,
      postsToday: 0,
      noPosts: 0,
      newStrikes: [],
      riskyUsers: [],
      autoPaused: [],
      pauseCompleted: [],
      pauseExpiredRemoved: [],
      currentlyPaused: [],
      subscriptionWarnings: [],
      subscriptionRemoved: [],
      dangerousCases: []
    };

    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
    
    for (const user of users) {
      const username = user.username || String(user.telegram_id);
      
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      if (user.in_chat) {
        stats.totalActive++;
        
        if (user.post_today) {
          stats.postsToday++;
        } else {
          stats.noPosts++;
        }
      }
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–∏—Å–∫–æ–º
      if (user.strikes_count === 3 && user.in_chat) {
        stats.riskyUsers.push({username, strikes: user.strikes_count});
      }
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –ø–∞—É–∑–µ
      if (user.pause_until && new Date(user.pause_until) > now) {
        const pauseEnd = new Date(user.pause_until);
        stats.currentlyPaused.push({
          username,
          pauseUntil: pauseEnd.toLocaleDateString('ru-RU')
        });
      }
      
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
      if (user.subscription_days_left <= 3 && user.subscription_days_left > 0) {
        stats.subscriptionWarnings.push({username, daysLeft: user.subscription_days_left});
      }
      
      // –û–ø–∞—Å–Ω—ã–µ —Å–ª—É—á–∞–∏
      if (user.strikes_count === 3 && user.in_chat) {
        stats.dangerousCases.push({
          username,
          reason: "3 —Å—Ç—Ä–∞–π–∫–∞ - –Ω–∞ –≥—Ä–∞–Ω–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
        });
      }
      
      if (user.subscription_days_left <= 3 && user.subscription_days_left > 0 && user.strikes_count > 0) {
        stats.dangerousCases.push({
          username,
          reason: `–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${user.subscription_days_left} –¥–Ω. + ${user.strikes_count} —Å—Ç—Ä–∞–π–∫(–∞)`
        });
      }
      
      if (user.in_chat && (!user.subscription_active && user.subscription_days_left === 0) && user.created_at) {
        const createdDate = new Date(user.created_at);
        const daysSinceCreated = Math.floor((now.getTime() - createdDate.getTime()) / (24 * 60 * 60 * 1000));
        if (daysSinceCreated <= 7) {
          stats.dangerousCases.push({
            username,
            reason: `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (${daysSinceCreated} –¥–Ω.)`
          });
        }
      }
      
      if (user.in_chat && user.subscription_active === false && user.subscription_days_left === 0) {
        stats.dangerousCases.push({
          username,
          reason: "–í —á–∞—Ç–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π"
        });
      }
    }

    return stats;
  }
} 