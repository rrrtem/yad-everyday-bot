import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { UserProcessor } from "../helpers/UserProcessor.ts";
import { ReportGenerator } from "../helpers/ReportGenerator.ts";
import { AdminReporter } from "../helpers/AdminReporter.ts";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

if (!SUPABASE_URL || !SUPABASE_KEY) {
  throw new Error("Missing Supabase environment variables for DailyCronFlow.");
}

/**
 * –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (dailyCron) - —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –ë2 –∏–∑ logic.md
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 04:00 UTC –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
 */
export class DailyCronFlow {
  private supabase: SupabaseClient;
  private userProcessor: UserProcessor;

  constructor() {
    this.supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
    this.userProcessor = new UserProcessor(this.supabase);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫—Ä–æ–Ω–∞
   */
  async execute(): Promise<Response> {
    const now = new Date();
    const startTime = Date.now();
    
    console.log(`ü§ñ Daily cron started at ${now.toISOString()}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      // console.log(`üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î...`);
      const users = await this.userProcessor.getAllUsers();
      console.log(`üìä Loaded ${users.length} users from DB`);
      
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      // ReportGenerator.logPreStats(users, now);
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = this.userProcessor.createInitialStats();

      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º —Ä–∏—Ç–º–æ–º (—Å—Ç—Ä–∞–π–∫–∏)
      await this.userProcessor.processStrikesForDailyUsers(users, now, stats);

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞—É–∑–µ
      await this.userProcessor.processPausedUsers(users, now, stats);

      // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (subscription_days_left)
      const usersToRemove = await this.userProcessor.processSubscriptions(users, now, stats);

      // 4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
      await this.userProcessor.removeExpiredUsers(users, usersToRemove, now, stats);

      // 5. –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
      await this.userProcessor.resetDailyFlags();

      // 6. –ê–Ω–∞–ª–∏–∑ –æ–ø–∞—Å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
      this.userProcessor.analyzeDangerousCases(users, now, stats);

      // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
      await AdminReporter.sendDailyCronReport(stats, 'daily', users);

      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      
      // ReportGenerator.logFinalStats(stats, executionTime, "daily cron");
      console.log(`‚úÖ Daily cron completed in ${executionTime}ms`);

      return new Response(JSON.stringify({
        message: "dailyCron –∑–∞–≤–µ—Ä—à—ë–Ω",
        executionTime,
        stats
      }), { status: 200, headers: { "Content-Type": "application/json" } });

    } catch (error) {
      console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ dailyCron:", error);
      return new Response(`–û—à–∏–±–∫–∞ dailyCron: ${error.message}`, { status: 500 });
    }
  }
} 