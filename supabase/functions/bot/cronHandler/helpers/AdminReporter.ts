import { ProcessingStats, User } from "./UserProcessor.ts";
import { ChatManager } from "./ChatManager.ts";
import { 
  OWNER_TELEGRAM_ID
} from "../../constants.ts";

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∞–¥–º–∏–Ω—É
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
 */
export class AdminReporter {
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (dailyCron –∏ allInfo) —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  static async sendDailyCronReport(stats: ProcessingStats, reportType: 'daily' | 'allinfo' = 'daily', users?: User[]): Promise<void> {
    // console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${reportType} –æ—Ç—á–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É (${OWNER_TELEGRAM_ID})`);
    
    try {
      const report = users 
        ? this.formatDetailedDailyCronReport(stats, reportType, users)
        : this.formatDailyCronReport(stats, reportType);
        
      await ChatManager.sendDirectMessage(OWNER_TELEGRAM_ID, report);
      // console.log(`‚úÖ ${reportType} –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É`);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${reportType} –æ—Ç—á–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É:`, err);
      throw err; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (weeklyCron)
   */
  static async sendWeeklyReport(stats: {
    totalWeeklyUsers: number;
    postsThisWeek: number;
    noPostsThisWeek: number;
    updatedUsers: Array<{username: string, unitsCount: number, consecutivePosts: number}>;
  }): Promise<void> {
    // console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º weekly –æ—Ç—á–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É (${OWNER_TELEGRAM_ID})`);
    
    try {
      const report = this.formatWeeklyReport(stats);
      await ChatManager.sendDirectMessage(OWNER_TELEGRAM_ID, report);
      // console.log(`‚úÖ Weekly –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É`);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ weekly –æ—Ç—á–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É:`, err);
      throw err;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
   */
  static async sendErrorReport(error: Error, operation: string, additionalInfo?: string): Promise<void> {
    console.log(`üö® Sending error report to admin`);
    
    try {
      const report = this.formatErrorReport(error, operation, additionalInfo);
      await ChatManager.sendDirectMessage(OWNER_TELEGRAM_ID, report);
      // console.log(`‚úÖ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É`);
    } catch (err) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ:`, err);
      // –ù–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –Ω–∏–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private static formatDetailedDailyCronReport(stats: ProcessingStats, reportType: 'daily' | 'allinfo', users: User[]): string {
    const reportTypeText = reportType === 'allinfo' ? 'AllInfo' : 'DailyCron';
    let report = ``;
    
    const now = new Date();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const activeUsers = users.filter(u => u.in_chat && u.pace === "daily");
    const weeklyUsers = users.filter(u => u.in_chat && u.pace === "weekly");
    const allActiveUsers = users.filter(u => u.in_chat);
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
    const usersWithActiveSubscription = allActiveUsers.filter(u => u.subscription_active);
    const usersOnSavedDays = allActiveUsers.filter(u => !u.subscription_active && u.subscription_days_left > 0);
    
    const usersWithPosts = activeUsers.filter(u => u.post_today);
    const usersWithoutPosts = activeUsers.filter(u => !u.post_today && (!u.pause_until || new Date(u.pause_until) <= now));
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    report += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (daily): ${activeUsers.length}\n`;
    report += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (weekly): ${weeklyUsers.length}\n`;
    report += `‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: ${usersWithActiveSubscription.length}\n`;
    report += `‚Ä¢ –ù–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω—è—Ö: ${usersOnSavedDays.length}\n\n`;

    
    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: –∫—Ç–æ –ø—Ä–∏—Å–ª–∞–ª –ø–æ—Å—Ç—ã
    if (usersWithPosts.length > 0) {
      report += `‚úÖ –ü—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç —Å–µ–≥–æ–¥–Ω—è (${usersWithPosts.length}):\n`;
      const usernames = usersWithPosts.map(u => u.username || `ID${u.telegram_id}`).sort();
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3-4 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
      for (let i = 0; i < usernames.length; i += 4) {
        const chunk = usernames.slice(i, i + 4);
        report += `   ${chunk.map(name => `@${name}`).join(', ')}\n`;
      }
      report += `\n`;
    }
    
    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: –∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –ø–æ—Å—Ç—ã
    if (usersWithoutPosts.length > 0) {
      report += `‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç (${usersWithoutPosts.length}):\n`;
      const usernames = usersWithoutPosts.map(u => u.username || `ID${u.telegram_id}`).sort();
      for (let i = 0; i < usernames.length; i += 4) {
        const chunk = usernames.slice(i, i + 4);
        report += `   ${chunk.map(name => `@${name}`).join(', ')}\n`;
      }
      report += `\n`;
    }
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–º–µ–Ω—å—à–µ 3 –¥–Ω–µ–π)
    const criticalSubscriptions = users.filter(u => 
      u.in_chat && 
      !u.subscription_active && 
      u.subscription_days_left > 0 && 
      u.subscription_days_left <= 3
    );
    
    if (criticalSubscriptions.length > 0) {
      report += `üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è ‚â§3 –¥–Ω–µ–π (${criticalSubscriptions.length}):\n`;
      criticalSubscriptions.forEach(u => {
        const username = u.username || `ID${u.telegram_id}`;
        report += `   @${username} ‚Äî ${u.subscription_days_left} –¥–Ω.\n`;
      });
      report += `\n`;
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å 3 —Å—Ç—Ä–∞–π–∫–∞–º–∏ (–Ω–∞ –≥—Ä–∞–Ω–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è)
    const dangerousUsers = users.filter(u => u.in_chat && u.strikes_count === 3);
    if (dangerousUsers.length > 0) {
      report += `‚ö†Ô∏è –ù–∞ –≥—Ä–∞–Ω–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (3 —Å—Ç—Ä–∞–π–∫–∞) ‚Äî ${dangerousUsers.length}:\n`;
      dangerousUsers.forEach(u => {
        const username = u.username || `ID${u.telegram_id}`;
        report += `   @${username}\n`;
      });
      report += `\n`;
    }
    
    // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (‚â§7 –¥–Ω–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ)
    const newUsersWithoutSub = users.filter(u => {
      if (!u.in_chat || u.subscription_active || u.subscription_days_left > 0 || !u.created_at) {
        return false;
      }
      const daysSinceCreated = Math.floor((now.getTime() - new Date(u.created_at).getTime()) / (24 * 60 * 60 * 1000));
      return daysSinceCreated <= 7;
    });
    
    if (newUsersWithoutSub.length > 0) {
      report += `üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (‚â§7 –¥–Ω–µ–π) ‚Äî ${newUsersWithoutSub.length}:\n`;
      newUsersWithoutSub.forEach(u => {
        const username = u.username || `ID${u.telegram_id}`;
        const daysSinceCreated = u.created_at 
          ? Math.floor((now.getTime() - new Date(u.created_at).getTime()) / (24 * 60 * 60 * 1000))
          : '?';
        report += `   @${username} (${daysSinceCreated} –¥–Ω.)\n`;
      });
      report += `\n`;
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –ø–∞—É–∑–µ
    const pausedUsers = users.filter(u => u.pause_until && new Date(u.pause_until) > now);
    if (pausedUsers.length > 0) {
      report += `üò¥ –ù–∞ –ø–∞—É–∑–µ —Å–µ–π—á–∞—Å (${pausedUsers.length}):\n`;
      pausedUsers.forEach(u => {
        const username = u.username || `ID${u.telegram_id}`;
        const pauseEndDate = new Date(u.pause_until!).toLocaleDateString('ru-RU');
        report += `   @${username} (–¥–æ ${pauseEndDate})\n`;
      });
      report += `\n`;
    }
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∏–∫–∞–º–∏)
    report += this.getDailyCronChangesText(stats);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    report += `‚Ä¢ –¢–∏–ø –æ—Ç—á–µ—Ç–∞: ${reportTypeText}\n`;
    
    if (reportType === 'allinfo') {
      report += `‚Ä¢ –û—Ç—á–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –≤—Ä—É—á–Ω—É—é (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)\n`;
    }
    
    const totalChanges = stats.newStrikes.length + stats.autoPaused.length + 
                        stats.pauseExpiredRemoved.length + stats.subscriptionRemoved.length;
    
    if (totalChanges > 0) {
      report += `‚Ä¢ –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalChanges}\n`;
    } else {
      report += `‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π\n`;
    }
    

    
    return report;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
   */
  private static formatDailyCronReport(stats: ProcessingStats, reportType: 'daily' | 'allinfo'): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let report = this.formatBasicDailyCronReport(stats);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ—Ç—á–µ—Ç–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const reportTypeText = reportType === 'allinfo' ? 'AllInfo' : 'DailyCron';
    report = report.replace('üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç dailyCron:', `üìä ${reportTypeText} –æ—Ç—á–µ—Ç:`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω–µ—Ü
  
    report += `\n‚Ä¢ –¢–∏–ø –æ—Ç—á–µ—Ç–∞: ${reportTypeText}`;
    
    if (reportType === 'allinfo') {
      report += `\n‚Ä¢ –û—Ç—á–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –≤—Ä—É—á–Ω—É—é (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const totalChanges = stats.newStrikes.length + stats.autoPaused.length + 
                        stats.pauseExpiredRemoved.length + stats.subscriptionRemoved.length;
    
    if (totalChanges > 0) {
      report += `\n‚Ä¢ ‚ö° –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalChanges}`;
    } else {
      report += `\n‚Ä¢ ‚úÖ –ù–∏–∫–∞–∫–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π`;
    }
    
    return report;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  private static formatWeeklyReport(stats: {
    totalWeeklyUsers: number;
    postsThisWeek: number;
    noPostsThisWeek: number;
    updatedUsers: Array<{username: string, unitsCount: number, consecutivePosts: number}>;
  }): string {
    let report = "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç WeeklyCron:\n\n";
    
    report += `üë• Weekly —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    report += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö weekly —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${stats.totalWeeklyUsers}\n`;
    report += `‚Ä¢ –ü—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.postsThisWeek}\n`;
    report += `‚Ä¢ –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.noPostsThisWeek}\n\n`;
    
    if (stats.updatedUsers.length > 0) {
      report += `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n`;
      stats.updatedUsers.forEach(user => {
        report += `‚Ä¢ @${user.username} ‚Äî –≤—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${user.unitsCount}, –ø–æ–¥—Ä—è–¥: ${user.consecutivePosts}\n`;
      });
      report += `\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (stats.totalWeeklyUsers > 0) {
      const successRate = Math.round((stats.postsThisWeek / stats.totalWeeklyUsers) * 100);
      report += `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${successRate}% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç\n\n`;
    }
    
    report += `‚úÖ Weekly –æ—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –≤ ${new Date().toLocaleString('ru-RU', { timeZone: 'UTC' })} UTC`;
    
    return report;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
   */
  private static formatErrorReport(error: Error, operation: string, additionalInfo?: string): string {
    let report = `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ ${operation}:\n\n`;
    
    report += `‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`;
    report += `üìç –û–ø–µ—Ä–∞—Ü–∏—è: ${operation}\n`;
    report += `üïê –í—Ä–µ–º—è: ${new Date().toISOString()}\n`;
    
    if (additionalInfo) {
      report += `üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ${additionalInfo}\n`;
    }
    
    if (error.stack) {
      // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ —Å—Ç–µ–∫–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
      const stackLines = error.stack.split('\n').slice(0, 4);
      report += `\nüîç –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${stackLines.join('\n')}`;
    }
    
    report += `\n\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã!`;
    
    return report;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π daily cron —Å –Ω–∏–∫–∞–º–∏
   */
  private static getDailyCronChangesText(stats: ProcessingStats): string {
    let result = '';
    let hasChanges = false;
    
    // –ù–æ–≤—ã–µ —Å—Ç—Ä–∞–π–∫–∏ —Å –Ω–∏–∫–∞–º–∏
    if (stats.newStrikes.length > 0) {
      result += `‚ö†Ô∏è –ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞–π–∫–∏ (${stats.newStrikes.length}):\n`;
      stats.newStrikes.forEach(user => {
        result += `   @${user.username} ‚Äî ${user.strikes} —Å—Ç—Ä–∞–π–∫\n`;
      });
      result += `\n`;
      hasChanges = true;
    }
    
    // –ê–≤—Ç–æ–ø–∞—É–∑—ã —Å –Ω–∏–∫–∞–º–∏
    if (stats.autoPaused.length > 0) {
      result += `‚è∏Ô∏è –£—à–ª–∏ –Ω–∞ –∞–≤—Ç–æ–ø–∞—É–∑—É (${stats.autoPaused.length}):\n`;
      stats.autoPaused.forEach(user => {
        result += `   @${user.username}\n`;
      });
      result += `\n`;
      hasChanges = true;
    }
    
    // –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–∞—É–∑—É —Å –Ω–∏–∫–∞–º–∏
    if (stats.pauseCompleted.length > 0) {
      result += `‚ñ∂Ô∏è –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–∞—É–∑—É (${stats.pauseCompleted.length}):\n`;
      stats.pauseCompleted.forEach(user => {
        result += `   @${user.username}\n`;
      });
      result += `\n`;
      hasChanges = true;
    }
    
    // –£–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–∞—É–∑—ã —Å –Ω–∏–∫–∞–º–∏
    if (stats.pauseExpiredRemoved.length > 0) {
      result += `‚ùå –£–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–∞—É–∑—ã (${stats.pauseExpiredRemoved.length}):\n`;
      stats.pauseExpiredRemoved.forEach(user => {
        result += `   @${user.username}\n`;
      });
      result += `\n`;
      hasChanges = true;
    }
    
    // –£–¥–∞–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –Ω–∏–∫–∞–º–∏
    if (stats.subscriptionRemoved.length > 0) {
      result += `üö´ –£–¥–∞–ª–µ–Ω—ã (–ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞) ‚Äî ${stats.subscriptionRemoved.length}:\n`;
      stats.subscriptionRemoved.forEach(user => {
        result += `   @${user.username}\n`;
      });
      result += `\n`;
      hasChanges = true;
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ —Å –Ω–∏–∫–∞–º–∏
    if (stats.subscriptionWarnings.length > 0) {
      result += `üí≥ –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ (${stats.subscriptionWarnings.length}):\n`;
      stats.subscriptionWarnings.forEach(user => {
        result += `   @${user.username} ‚Äî ${user.daysLeft} –¥–Ω. –æ—Å—Ç–∞–ª–æ—Å—å\n`;
      });
      result += `\n`;
      hasChanges = true;
    }
    
    // –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ
    if (!hasChanges) {
      result += `‚úÖ –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫–∞–∫–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ\n\n`;
    }
    
    return result;
  }

  /**
   * –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ constants.ts)
   */
  private static formatBasicDailyCronReport(stats: ProcessingStats): string {
    let report = "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç dailyCron:\n\n";
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    report += `üë• –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    report += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${stats.totalActive}\n`;
    report += `‚Ä¢ –ü—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç —Å–µ–≥–æ–¥–Ω—è: ${stats.postsToday}\n`;
    report += `‚Ä¢ –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø–æ—Å—Ç: ${stats.noPosts}\n\n`;
    
    // –°—Ç—Ä–∞–π–∫–∏ –∏ —Ä–∏—Å–∫–∏
    if (stats.newStrikes.length > 0) {
      report += `‚ö†Ô∏è –ù–æ–≤—ã–µ —Å—Ç—Ä–∞–π–∫–∏:\n`;
      stats.newStrikes.forEach((user: any) => {
        report += `‚Ä¢ @${user.username} ‚Äî ${user.strikes} —Å—Ç—Ä–∞–π–∫(–∞)\n`;
      });
      report += `\n`;
    }
    
    if (stats.riskyUsers.length > 0) {
      report += `üö® –ù–∞ –≥—Ä–∞–Ω–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (3 —Å—Ç—Ä–∞–π–∫–∞):\n`;
      stats.riskyUsers.forEach((user: any) => {
        report += `‚Ä¢ @${user.username}\n`;
      });
      report += `\n`;
    }
    
    if (stats.autoPaused.length > 0) {
      report += `‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—à–ª–∏ –Ω–∞ –ø–∞—É–∑—É:\n`;
      stats.autoPaused.forEach((user: any) => {
        report += `‚Ä¢ @${user.username}\n`;
      });
      report += `\n`;
    }
    
    // –ü–∞—É–∑—ã
    if (stats.pauseCompleted.length > 0) {
      report += `‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–∞—É–∑—É:\n`;
      stats.pauseCompleted.forEach((user: any) => {
        report += `‚Ä¢ @${user.username}\n`;
      });
      report += `\n`;
    }
    
    if (stats.pauseExpiredRemoved.length > 0) {
      report += `‚ùå –£–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–∞—É–∑—ã:\n`;
      stats.pauseExpiredRemoved.forEach((user: any) => {
        report += `‚Ä¢ @${user.username}\n`;
      });
      report += `\n`;
    }
    
    if (stats.currentlyPaused.length > 0) {
      report += `üò¥ –°–µ–π—á–∞—Å –Ω–∞ –ø–∞—É–∑–µ:\n`;
      stats.currentlyPaused.forEach((user: any) => {
        report += `‚Ä¢ @${user.username} (–¥–æ ${user.pauseUntil})\n`;
      });
      report += `\n`;
    }
    
    // –ü–æ–¥–ø–∏—Å–∫–∏
    if (stats.subscriptionWarnings.length > 0) {
      report += `üí≥ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:\n`;
      stats.subscriptionWarnings.forEach((user: any) => {
        report += `‚Ä¢ @${user.username} ‚Äî ${user.daysLeft} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å\n`;
      });
      report += `\n`;
    }
    
    if (stats.subscriptionRemoved.length > 0) {
      report += `üö´ –£–¥–∞–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:\n`;
      stats.subscriptionRemoved.forEach((user: any) => {
        report += `‚Ä¢ @${user.username}\n`;
      });
      report += `\n`;
    }
    
    // –û–ø–∞—Å–Ω—ã–µ —Å–ª—É—á–∞–∏
    if (stats.dangerousCases.length > 0) {
      report += `üî¥ –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø:\n`;
      stats.dangerousCases.forEach((user: any) => {
        report += `‚Ä¢ @${user.username} ‚Äî ${user.reason}\n`;
      });
      report += `\n`;
    }
    
    report += `‚úÖ –û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –≤ ${new Date().toLocaleString('ru-RU', { timeZone: 'UTC' })} UTC`;
    
    return report;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫—Ä–∞—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ) - –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
   */
  private static getStandardStatsText(stats: ProcessingStats): string {
    let result = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ
    if (stats.newStrikes.length > 0) {
      result += `‚ö†Ô∏è –ù–æ–≤—ã–µ —Å—Ç—Ä–∞–π–∫–∏: ${stats.newStrikes.length}\n`;
    }
    
    if (stats.autoPaused.length > 0) {
      result += `‚è∏Ô∏è –ê–≤—Ç–æ–ø–∞—É–∑—ã: ${stats.autoPaused.length}\n`;
    }
    
    if (stats.pauseExpiredRemoved.length > 0) {
      result += `‚ùå –£–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–∞—É–∑—ã: ${stats.pauseExpiredRemoved.length}\n`;
    }
    
    if (stats.subscriptionRemoved.length > 0) {
      result += `üö´ –£–¥–∞–ª–µ–Ω—ã (–ø–æ–¥–ø–∏—Å–∫–∞): ${stats.subscriptionRemoved.length}\n`;
    }
    
    return result;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  static async sendQuickStats(message: string): Promise<void> {
    try {
      const report = `üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n${message}\n\nüïê ${new Date().toISOString()}`;
      await ChatManager.sendDirectMessage(OWNER_TELEGRAM_ID, report);
      console.log(`‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, err);
    }
  }
} 