import { SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { ChatManager } from "./ChatManager.ts";
import { 
  MSG_STRIKE_FIRST,
  MSG_STRIKE_SECOND,
  MSG_STRIKE_THIRD,
  MSG_STRIKE_FOURTH,
  MSG_PAUSE_EXPIRED_REMOVED,
  MSG_SUBSCRIPTION_ENDING_REMINDER,
  MSG_SUBSCRIPTION_EXPIRED,
  MSG_REMOVED_SUBSCRIPTION_EXPIRED,
  AUTO_PAUSE_DAYS,
  SUBSCRIPTION_REMINDER_DAYS
} from "../../constants.ts";

export interface User {
  telegram_id: number;
  username?: string;
  in_chat: boolean;
  pace: string;
  post_today: boolean;
  strikes_count: number;
  consecutive_posts_count?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
  pause_until?: string;
  pause_started_at?: string;
  pause_days: number;
  subscription_days_left: number;
  subscription_active: boolean;
  club: boolean;
  created_at?: string;
  updated_at?: string;
  expires_at?: string;
  left_at?: string;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è publicDeadlineReminder
  mode?: string;
  public_remind?: boolean;
}

export interface ProcessingStats {
  totalActive: number;
  postsToday: number;
  noPosts: number;
  newStrikes: Array<{username: string, strikes: number}>;
  riskyUsers: Array<{username: string, strikes: number}>;
  autoPaused: Array<{username: string}>;
  pauseCompleted: Array<{username: string}>;
  pauseExpiredRemoved: Array<{username: string}>;
  currentlyPaused: Array<{username: string, pauseUntil: string}>;
  subscriptionWarnings: Array<{username: string, daysLeft: number}>;
  subscriptionRemoved: Array<{username: string}>;
  dangerousCases: Array<{username: string, reason: string}>;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫—Ä–æ–Ω-–∑–∞–¥–∞—á
 */
export class UserProcessor {
  constructor(private supabase: SupabaseClient) {}

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
   */
  async getAllUsers(): Promise<User[]> {
    const usersRes = await this.supabase
      .from("users")
      .select("*");
      
    if (usersRes.error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersRes.error.message}`);
    }
    
    return usersRes.data || [];
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–π–∫–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º —Ä–∏—Ç–º–æ–º
   */
  async processStrikesForDailyUsers(users: User[], now: Date, stats: ProcessingStats): Promise<void> {
    console.log(`üîç –§–ê–ó–ê 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º —Ä–∏—Ç–º–æ–º`);

    for (const user of users) {
      if (user.in_chat && user.pace === "daily") {
        stats.totalActive++;
        
        if (user.post_today) {
          stats.postsToday++;
        } else {
          stats.noPosts++;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞ –ø–∞—É–∑–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          if (user.pause_until && new Date(user.pause_until) > now) {
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞—É–∑–µ
          }
          
          await this.processUserStrike(user, now, stats);
        }
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–π–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async processUserStrike(user: User, now: Date, stats: ProcessingStats): Promise<void> {
    const newStrikes = (user.strikes_count || 0) + 1;
    let messageToSend = "";
    let updateData: any = {
      strikes_count: newStrikes,
      consecutive_posts_count: 0, // –°–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ —Å—Ç—Ä–∞–π–∫–µ
      updated_at: now.toISOString()
    };
    
    switch (newStrikes) {
      case 1:
        messageToSend = MSG_STRIKE_FIRST;
        break;
      case 2:
        messageToSend = MSG_STRIKE_SECOND;
        break;
      case 3:
        messageToSend = MSG_STRIKE_THIRD;
        stats.riskyUsers.push({username: user.username || String(user.telegram_id), strikes: newStrikes});
        break;
      case 4:
        messageToSend = MSG_STRIKE_FOURTH;
        updateData.pause_started_at = now.toISOString();
        updateData.pause_until = new Date(now.getTime() + AUTO_PAUSE_DAYS * 24 * 60 * 60 * 1000).toISOString();
        updateData.pause_days = AUTO_PAUSE_DAYS;
        stats.autoPaused.push({username: user.username || String(user.telegram_id)});
        break;
    }
    
    if (newStrikes <= 4) {
      await this.supabase
        .from("users")
        .update(updateData)
        .eq("telegram_id", user.telegram_id);
        
      await ChatManager.sendDirectMessage(user.telegram_id, messageToSend);
      
      if (newStrikes < 4) {
        stats.newStrikes.push({username: user.username || String(user.telegram_id), strikes: newStrikes});
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞—É–∑–µ
   */
  async processPausedUsers(users: User[], now: Date, stats: ProcessingStats): Promise<void> {
    console.log(`üîç –§–ê–ó–ê 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞—É–∑–µ`);
    
    for (const user of users) {
      if (user.pause_until) {
        const pauseEnd = new Date(user.pause_until);
        if (pauseEnd <= now) {
          await this.processPauseExpired(user, now, stats);
        } else {
          // –í—Å–µ –µ—â–µ –Ω–∞ –ø–∞—É–∑–µ
          stats.currentlyPaused.push({
            username: user.username || String(user.telegram_id),
            pauseUntil: pauseEnd.toLocaleDateString('ru-RU')
          });
        }
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–∞—É–∑—ã
   */
  private async processPauseExpired(user: User, now: Date, stats: ProcessingStats): Promise<void> {
    console.log(`‚è∞ –ü–∞—É–∑–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è ${user.username || user.telegram_id}, strikes: ${user.strikes_count}`);
    
    if (user.strikes_count === 4) {
      console.log(`üö® –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username || user.telegram_id} –∏–∑ —á–∞—Ç–∞ (4 —Å—Ç—Ä–∞–π–∫–∞)`);
      
      try {
        await ChatManager.removeUserFromChat(user.telegram_id);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username || user.telegram_id}:`, err);
      }
      
      await this.supabase
        .from("users")
        .update({
          in_chat: false,
          strikes_count: 0,
          pause_started_at: null,
          pause_until: null,
          pause_days: 0,
          left_at: now.toISOString(),
          updated_at: now.toISOString()
        })
        .eq("telegram_id", user.telegram_id);
        
      await ChatManager.sendDirectMessage(user.telegram_id, MSG_PAUSE_EXPIRED_REMOVED);
      stats.pauseExpiredRemoved.push({username: user.username || String(user.telegram_id)});
    } else {
      console.log(`‚úÖ –°–Ω–∏–º–∞–µ–º —Å –ø–∞—É–∑—ã ${user.username || user.telegram_id} (–±—ã–ª –ø–æ—Å—Ç –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã)`);
      
      await this.supabase
        .from("users")
        .update({
          pause_started_at: null,
          pause_until: null,
          pause_days: 0,
          updated_at: now.toISOString()
        })
        .eq("telegram_id", user.telegram_id);
        
      stats.pauseCompleted.push({username: user.username || String(user.telegram_id)});
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (subscription_days_left)
   */
  async processSubscriptions(users: User[], now: Date, stats: ProcessingStats): Promise<number[]> {
    console.log(`üîç –§–ê–ó–ê 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ subscription_days_left`);
    const usersToRemove: number[] = [];
    
    for (const user of users) {
      const hasNoActiveSubscription = !user.subscription_active;
      
      if (user.subscription_days_left > 0 && user.in_chat && hasNoActiveSubscription) {
        await this.processUserSubscription(user, now, stats, usersToRemove);
      } else if (user.in_chat && hasNoActiveSubscription && user.subscription_days_left === 0) {
        console.log(`üö® –î–´–†–ö–ê –í –õ–û–ì–ò–ö–ï: ${user.username || user.telegram_id} –≤ —á–∞—Ç–µ –ë–ï–ó –ø–æ–¥–ø–∏—Å–∫–∏ –ò –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π`);
        
        await this.supabase
          .from("users")
          .update({
            expires_at: now.toISOString(),
            updated_at: now.toISOString()
          })
          .eq("telegram_id", user.telegram_id);
          
        usersToRemove.push(user.telegram_id);
      }
    }
    
    return usersToRemove;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async processUserSubscription(user: User, now: Date, stats: ProcessingStats, usersToRemove: number[]): Promise<void> {
    const newDaysLeft = user.subscription_days_left - 1;
    console.log(`üìâ –û–ë–†–ê–ë–û–¢–ö–ê ${user.username || user.telegram_id}: ${user.subscription_days_left} -> ${newDaysLeft} –¥–Ω–µ–π`);
    
    if (newDaysLeft === SUBSCRIPTION_REMINDER_DAYS) {
      console.log(`‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${user.username || user.telegram_id} (${newDaysLeft} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)`);
      const isClubMember = user.club || false;
      await ChatManager.sendDirectMessage(user.telegram_id, MSG_SUBSCRIPTION_ENDING_REMINDER(isClubMember));
      stats.subscriptionWarnings.push({username: user.username || String(user.telegram_id), daysLeft: newDaysLeft});
      
    } else if (newDaysLeft === 1) {
      console.log(`üö® –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ —É ${user.username || user.telegram_id}`);
      const isClubMember = user.club || false;
      await ChatManager.sendDirectMessage(user.telegram_id, MSG_SUBSCRIPTION_EXPIRED(isClubMember));
      stats.subscriptionWarnings.push({username: user.username || String(user.telegram_id), daysLeft: newDaysLeft});
      
    } else if (newDaysLeft === 0) {
      console.log(`üö® –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —É ${user.username || user.telegram_id} - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
      
      await this.supabase
        .from("users")
        .update({
          expires_at: now.toISOString(),
          subscription_days_left: 0,
          updated_at: now.toISOString()
        })
        .eq("telegram_id", user.telegram_id);
        
      usersToRemove.push(user.telegram_id);
      return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º days_left, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ 0
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    await this.supabase
      .from("users")
      .update({
        subscription_days_left: newDaysLeft,
        updated_at: now.toISOString()
      })
      .eq("telegram_id", user.telegram_id);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
   */
  async removeExpiredUsers(users: User[], usersToRemove: number[], now: Date, stats: ProcessingStats): Promise<void> {
    console.log(`üîç –§–ê–ó–ê 4: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π`);
    
    for (const telegramId of usersToRemove) {
      const user = users.find(u => u.telegram_id === telegramId);
      if (!user) continue;
      
      console.log(`üö® –£–¥–∞–ª—è–µ–º ${user.username || user.telegram_id} (–ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞)`);
      
      try {
        await ChatManager.removeUserFromChat(user.telegram_id);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username || user.telegram_id}:`, err);
      }
      
      await this.supabase
        .from("users")
        .update({
          in_chat: false,
          updated_at: now.toISOString()
        })
        .eq("telegram_id", user.telegram_id);
        
      await ChatManager.sendDirectMessage(user.telegram_id, MSG_REMOVED_SUBSCRIPTION_EXPIRED);
      stats.subscriptionRemoved.push({username: user.username || String(user.telegram_id)});
    }
  }

  /**
   * –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ post_today
   */
  async resetDailyFlags(): Promise<void> {
    console.log(`üîç –§–ê–ó–ê 5: –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ post_today`);
    
    const resetResult = await this.supabase
      .from("users")
      .update({ post_today: false })
      .neq("post_today", false);
      
    if (resetResult.error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ post_today:`, resetResult.error);
    } else {
      console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω—ã —Ñ–ª–∞–≥–∏ post_today`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –æ–ø–∞—Å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
   */
  analyzeDangerousCases(users: User[], now: Date, stats: ProcessingStats): void {
    console.log(`üîç –§–ê–ó–ê 6: –ê–Ω–∞–ª–∏–∑ –æ–ø–∞—Å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤`);
    
    for (const user of users) {
      const username = user.username || String(user.telegram_id);
      
      // –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å 3 —Å—Ç—Ä–∞–π–∫–∞–º–∏
      if (user.strikes_count === 3 && user.in_chat) {
        stats.dangerousCases.push({
          username,
          reason: "3 —Å—Ç—Ä–∞–π–∫–∞ - –Ω–∞ –≥—Ä–∞–Ω–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø–∞—É–∑—É"
        });
      }
      
      // –ù–æ–≤—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≤ —á–∞—Ç–µ, –Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)
      if (user.in_chat && (!user.subscription_active && user.subscription_days_left === 0) && user.created_at) {
        const createdDate = new Date(user.created_at);
        const daysSinceCreated = Math.floor((now.getTime() - createdDate.getTime()) / (24 * 60 * 60 * 1000));
        if (daysSinceCreated <= 7) {
          stats.dangerousCases.push({
            username,
            reason: `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (${daysSinceCreated} –¥–Ω.)`
          });
        }
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  createInitialStats(): ProcessingStats {
    return {
      totalActive: 0,
      postsToday: 0,
      noPosts: 0,
      newStrikes: [],
      riskyUsers: [],
      autoPaused: [],
      pauseCompleted: [],
      pauseExpiredRemoved: [],
      currentlyPaused: [],
      subscriptionWarnings: [],
      subscriptionRemoved: [],
      dangerousCases: []
    };
  }
} 