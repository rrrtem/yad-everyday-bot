import { ProcessingStats, User } from "./UserProcessor.ts";
import { ChatManager } from "./ChatManager.ts";
import { 
  MSG_PUBLIC_DEADLINE_REMINDER,
  PUBLIC_REMINDER_THREAD_ID_TEXT,
  PUBLIC_REMINDER_THREAD_ID_IMAGE
} from "../../constants.ts";

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–æ–Ω-–∑–∞–¥–∞—á
 */
export class ReportGenerator {


  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   */
  static async sendPublicReminders(users: User[], timeLeftMsg: string): Promise<{sent: number, usernames: string[]}> {
    const now = new Date();
    const allUsernames: string[] = [];
    let sentReminders = 0;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Å–ª–æ–≤–∏—è–º –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const textUsers = users.filter(u => 
      u.in_chat && 
      u.pace === "daily" &&
      (!u.pause_until || new Date(u.pause_until) <= now) &&
      u.public_remind && 
      !u.post_today && 
      u.mode?.trim() === "text" &&
      u.username
    );
    
    const imageUsers = users.filter(u => 
      u.in_chat && 
      u.pace === "daily" &&
      (!u.pause_until || new Date(u.pause_until) <= now) &&
      u.public_remind && 
      !u.post_today && 
      u.mode?.trim() === "image" &&
      u.username
    );
    
    console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–¢–û–õ–¨–ö–û pace="daily"):`);
    console.log(`   - –†–µ–∂–∏–º "text": ${textUsers.length} —á–µ–ª.`);
    console.log(`   - –†–µ–∂–∏–º "image": ${imageUsers.length} —á–µ–ª.`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏–∫–æ–≤
    if (textUsers.length > 0) {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è text –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç—Ä–µ–¥ ${PUBLIC_REMINDER_THREAD_ID_TEXT}...`);
      const usernames = textUsers.map(u => u.username).filter((name): name is string => !!name);
      allUsernames.push(...usernames);
      const text = MSG_PUBLIC_DEADLINE_REMINDER(usernames, timeLeftMsg);
      
      const success = await ChatManager.sendGroupMessage(text, PUBLIC_REMINDER_THREAD_ID_TEXT);
      if (success) {
        console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è text –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        sentReminders++;
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω—â–∏–∫–æ–≤
    if (imageUsers.length > 0) {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è image –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç—Ä–µ–¥ ${PUBLIC_REMINDER_THREAD_ID_IMAGE}...`);
      const usernames = imageUsers.map(u => u.username).filter((name): name is string => !!name);
      allUsernames.push(...usernames);
      const text = MSG_PUBLIC_DEADLINE_REMINDER(usernames, timeLeftMsg);
      
      const success = await ChatManager.sendGroupMessage(text, PUBLIC_REMINDER_THREAD_ID_IMAGE);
      if (success) {
        console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è image –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        sentReminders++;
      }
    }

    return { sent: sentReminders, usernames: allUsernames };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
   */
  static calculateTimeUntilEndOfDay(now: Date): {diffHours: number, diffMinutes: number, timeLeftMsg: string} {
    // –ö–æ–Ω–µ—Ü –¥–Ω—è ‚Äî 04:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –ø–æ UTC (–≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ dailyCron)
    const endOfDay = new Date(now);
    endOfDay.setUTCHours(4, 0, 0, 0);
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ—Å–ª–µ 04:00, —Ç–æ –∫–æ–Ω–µ—Ü –¥–Ω—è ‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ 04:00
    if (now.getUTCHours() >= 4) {
      endOfDay.setUTCDate(endOfDay.getUTCDate() + 1);
    }
    
    const diffMs = endOfDay.getTime() - now.getTime();
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));

    let timeLeftMsg = "";
    if (diffHours > 0) {
      timeLeftMsg = `–î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å ${diffHours} ${this.pluralizeHours(diffHours)}!`;
    } else {
      timeLeftMsg = `–î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —á–∞—Å–∞! (${diffMinutes} –º–∏–Ω—É—Ç)`;
    }

    return { diffHours, diffMinutes, timeLeftMsg };
  }

  /**
   * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—á–∞—Å"
   */
  private static pluralizeHours(n: number): string {
    const abs = Math.abs(n);
    if (abs === 1) return '—á–∞—Å';
    if (abs >= 2 && abs <= 4) return '—á–∞—Å–∞';
    return '—á–∞—Å–æ–≤';
  }

  /**
   * –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  static logFinalStats(stats: ProcessingStats, executionTime: number, operation: string): void {
    // console.log(`\n=== ${operation.toUpperCase()} COMPLETED ===`);
    // console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`);
    // console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    // console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalActive}`);
    // console.log(`   - –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å—Ç—ã: ${stats.postsToday}`);
    // console.log(`   - –ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: ${stats.noPosts}`);
    // console.log(`   - –ù–æ–≤—ã—Ö —Å—Ç—Ä–∞–π–∫–æ–≤: ${stats.newStrikes.length}`);
    // console.log(`   - –ê–≤—Ç–æ–ø–∞—É–∑: ${stats.autoPaused.length}`);
    // console.log(`   - –£–¥–∞–ª–µ–Ω–∏–π: ${stats.pauseExpiredRemoved.length + stats.subscriptionRemoved.length}`);
    // console.log(`   - –ù–∞ –ø–∞—É–∑–µ: ${stats.currentlyPaused.length}`);
    // console.log(`   - –û–ø–∞—Å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: ${stats.dangerousCases.length}`);
    // console.log(`üèÅ ${operation} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ ${new Date().toISOString()}`);
    console.log(`‚úÖ ${operation} completed in ${executionTime}ms - ${stats.totalActive} active, ${stats.newStrikes.length} strikes, ${stats.autoPaused.length} paused`);
  }

  /**
   * –í—ã–≤–æ–¥ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  static logPreStats(users: User[], now: Date): void {
    const activeUsers = users.filter(u => u.in_chat);
    const dailyUsers = activeUsers.filter(u => u.pace === "daily");
    const weeklyUsers = activeUsers.filter(u => u.pace === "weekly");
    const pausedUsers = users.filter(u => u.pause_until && new Date(u.pause_until) > now);
    
    // console.log(`üìà –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    // console.log(`   - –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${activeUsers.length}`);
    // console.log(`   - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∏—Ç–º: ${dailyUsers.length}`);
    // console.log(`   - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–∏—Ç–º: ${weeklyUsers.length}`);
    // console.log(`   - –ù–∞ –ø–∞—É–∑–µ: ${pausedUsers.length}`);
    console.log(`üìà Pre-stats: ${activeUsers.length} active (${dailyUsers.length} daily, ${weeklyUsers.length} weekly), ${pausedUsers.length} paused`);
  }
} 