import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { findUserByTelegramId, sendDirectMessage } from "./userHandler.ts";
import { handlePauseCommand, handleUnpauseCommand } from "./pauseHandler.ts";
import { handleChangeModeCommand } from "./commandHandler.ts";
import { handleChangePaceCommand } from "./changePaceHandler.ts";
import { BotMenuManager } from "./utils/botMenuManager.ts";
import {
  CALLBACK_CHANGE_MODE_TEXT,
  CALLBACK_CHANGE_PACE_DAILY,
  CALLBACK_CHANGE_PACE_WEEKLY,
  AVAILABLE_MODES,
  MSG_REMINDERS_ENABLED,
  MSG_REMINDERS_DISABLED
} from "./constants.ts";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_BOT_TOKEN");
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

if (!SUPABASE_URL || !SUPABASE_KEY || !TELEGRAM_BOT_TOKEN) {
  throw new Error("Missing Supabase or Telegram environment variables for statusCallbackHandlers.");
}

const supabase: SupabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ callback_query –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function answerCallbackQuery(callbackQueryId: string, text?: string, showAlert = false): Promise<void> {
  try {
    await fetch(`${TELEGRAM_API}/answerCallbackQuery`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text || "",
        show_alert: showAlert
      })
    });
  } catch (error) {
    console.error("Error answering callback query:", error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É"
 */
export async function handlePauseCallbackQuery(callbackQuery: any): Promise<void> {
  console.log("handlePauseCallbackQuery called", JSON.stringify(callbackQuery));
  
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    const fakeMessage = {
      from: callbackQuery.from,
      chat: { id: callbackQuery.from.id, type: "private" }
    };
    
    await handlePauseCommand(fakeMessage);
    await answerCallbackQuery(callbackQuery.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—É–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
    
  } catch (error) {
    console.error("handlePauseCallbackQuery error:", error);
    await answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", true);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–Ω—è—Ç—å —Å –ø–∞—É–∑—ã"
 */
export async function handleUnpauseCallbackQuery(callbackQuery: any): Promise<void> {
  console.log("handleUnpauseCallbackQuery called", JSON.stringify(callbackQuery));
  
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    const fakeMessage = {
      from: callbackQuery.from,
      chat: { id: callbackQuery.from.id, type: "private" }
    };
    
    await handleUnpauseCommand(fakeMessage);
    await answerCallbackQuery(callbackQuery.id, "–ü–∞—É–∑–∞ —Å–Ω—è—Ç–∞");
    
  } catch (error) {
    console.error("handleUnpauseCallbackQuery error:", error);
    await answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", true);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º" 
 */
export async function handleChangeModeCallbackQuery(callbackQuery: any): Promise<void> {
  console.log("handleChangeModeCallbackQuery called", JSON.stringify(callbackQuery));
  
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    const fakeMessage = {
      from: callbackQuery.from,
      chat: { id: callbackQuery.from.id, type: "private" }
    };
    
    await handleChangeModeCommand(fakeMessage);
    await answerCallbackQuery(callbackQuery.id, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º");
    
  } catch (error) {
    console.error("handleChangeModeCallbackQuery error:", error);
    await answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", true);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∏—Ç–º"
 */
export async function handleChangePaceCallbackQuery(callbackQuery: any): Promise<void> {
  console.log("handleChangePaceCallbackQuery called", JSON.stringify(callbackQuery));
  
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    const fakeMessage = {
      from: callbackQuery.from,
      chat: { id: callbackQuery.from.id, type: "private" }
    };
    
    await handleChangePaceCommand(fakeMessage);
    await answerCallbackQuery(callbackQuery.id, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ä–∏—Ç–º");
    
  } catch (error) {
    console.error("handleChangePaceCallbackQuery error:", error);
    await answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", true);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
 */
export async function handleChangePublicReminderCallbackQuery(callbackQuery: any): Promise<void> {
  console.log("handleChangePublicReminderCallbackQuery called", JSON.stringify(callbackQuery));
  
  const telegramId = callbackQuery.from.id;
  
  try {
    const user = await findUserByTelegramId(telegramId);
    if (!user) {
      await answerCallbackQuery(callbackQuery.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", true);
      return;
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
    const newReminderSetting = !user.public_remind;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    const { error } = await supabase
      .from("users")
      .update({ 
        public_remind: newReminderSetting,
        updated_at: new Date().toISOString()
      })
      .eq("telegram_id", telegramId);
    
    if (error) {
      console.error("Error updating reminders setting:", error);
      await answerCallbackQuery(callbackQuery.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", true);
      return;
    }
    
    const message = newReminderSetting 
      ? "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" 
      : "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã";
    
    await answerCallbackQuery(callbackQuery.id, message);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const confirmMessage = newReminderSetting ? MSG_REMINDERS_ENABLED : MSG_REMINDERS_DISABLED;
    await sendDirectMessage(telegramId, confirmMessage);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await BotMenuManager.updateUserMenu(telegramId);
    
  } catch (error) {
    console.error("handleChangePublicReminderCallbackQuery error:", error);
    await answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", true);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (—Å—Ç–∞—Ä—ã–π, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export async function handleRemindersCallbackQuery(callbackQuery: any, enableReminders: boolean): Promise<void> {
  console.log("handleRemindersCallbackQuery called", JSON.stringify(callbackQuery), "enable:", enableReminders);
  
  const telegramId = callbackQuery.from.id;
  
  try {
    const user = await findUserByTelegramId(telegramId);
    if (!user) {
      await answerCallbackQuery(callbackQuery.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", true);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    const { error } = await supabase
      .from("users")
      .update({ 
        public_remind: enableReminders,
        updated_at: new Date().toISOString()
      })
      .eq("telegram_id", telegramId);
    
    if (error) {
      console.error("Error updating reminders setting:", error);
      await answerCallbackQuery(callbackQuery.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", true);
      return;
    }
    
    const message = enableReminders 
      ? "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" 
      : "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã";
    
    await answerCallbackQuery(callbackQuery.id, message);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const confirmMessage = enableReminders ? MSG_REMINDERS_ENABLED : MSG_REMINDERS_DISABLED;
    await sendDirectMessage(telegramId, confirmMessage);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await BotMenuManager.updateUserMenu(telegramId);
    
  } catch (error) {
    console.error("handleRemindersCallbackQuery error:", error);
    await answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", true);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º" (–∫–æ–≥–¥–∞ —Ä–µ–∂–∏–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
 */
export async function handleChooseModeCallbackQuery(callbackQuery: any): Promise<void> {
  console.log("handleChooseModeCallbackQuery called", JSON.stringify(callbackQuery));
  
  try {
    const telegramId = callbackQuery.from.id;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    const keyboard = {
      inline_keyboard: [
        [{ text: "üìù –¢–µ–∫—Å—Ç—ã", callback_data: CALLBACK_CHANGE_MODE_TEXT }]
      ]
    };
    
    const message = `–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —É—á–∞—Å—Ç–∏—è:

‚Ä¢ **–¢–µ–∫—Å—Ç—ã** ‚Äî —ç—Å—Å–µ, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Å–æ–±–æ–π –∏–ª–∏ –º–∏—Ä–æ–º, –¥–Ω–µ–≤–Ω–∏–∫–∏, –ø–æ—Å—Ç—ã, –∞–Ω–æ–Ω—Å—ã –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∂–∞–Ω—Ä—ã`;
    
    await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: telegramId,
        text: message,
        parse_mode: "Markdown",
        reply_markup: keyboard
      })
    });
    
    await answerCallbackQuery(callbackQuery.id, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —É—á–∞—Å—Ç–∏—è");
    
  } catch (error) {
    console.error("handleChooseModeCallbackQuery error:", error);
    await answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", true);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Ä–∏—Ç–º" (–∫–æ–≥–¥–∞ —Ä–∏—Ç–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
 */
export async function handleChoosePaceCallbackQuery(callbackQuery: any): Promise<void> {
  console.log("handleChoosePaceCallbackQuery called", JSON.stringify(callbackQuery));
  
  try {
    const telegramId = callbackQuery.from.id;
    const user = await findUserByTelegramId(telegramId);
    
    if (!user) {
      await answerCallbackQuery(callbackQuery.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", true);
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∏—Ç–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let keyboard;
    let message;
    
    // –î–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–±–∞ —Ä–∏—Ç–º–∞
    keyboard = {
      inline_keyboard: [
        [{ text: "‚ö° –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data: CALLBACK_CHANGE_PACE_DAILY }],
        [{ text: "üìÖ –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data: CALLBACK_CHANGE_PACE_WEEKLY }]
      ]
    };
    message = `‚è∞ –í—ã–±–µ—Ä–∏ —Ä–∏—Ç–º —É—á–∞—Å—Ç–∏—è:

‚Ä¢ **–ö–∞–∂–¥—ã–π –¥–µ–Ω—å** ‚Äî –ø—É–±–ª–∏–∫—É–µ—à—å –ø–æ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
‚Ä¢ **–û–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é** ‚Äî –ø—É–±–ª–∏–∫—É–µ—à—å –ø–æ—Å—Ç —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é`;
    
    await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: telegramId,
        text: message,
        parse_mode: "Markdown",
        reply_markup: keyboard
      })
    });
    
    await answerCallbackQuery(callbackQuery.id, "–í—ã–±–µ—Ä–∏ —Ä–∏—Ç–º —É—á–∞—Å—Ç–∏—è");
    
  } catch (error) {
    console.error("handleChoosePaceCallbackQuery error:", error);
    await answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", true);
  }
} 